
PJ_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004200  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004444  08004444  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004444  08004444  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004444  08004444  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800444c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000010  08004458  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004458  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de65  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002258  00000000  00000000  0002de9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  000300f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  00030ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017bcd  00000000  00000000  00031b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b29a  00000000  00000000  00049735  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008984f  00000000  00000000  000549cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de21e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003888  00000000  00000000  000de29c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080042f4 	.word	0x080042f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080042f4 	.word	0x080042f4

0800014c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000150:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000154:	4b05      	ldr	r3, [pc, #20]	; (800016c <__NVIC_SystemReset+0x20>)
 8000156:	68db      	ldr	r3, [r3, #12]
 8000158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800015c:	4903      	ldr	r1, [pc, #12]	; (800016c <__NVIC_SystemReset+0x20>)
 800015e:	4b04      	ldr	r3, [pc, #16]	; (8000170 <__NVIC_SystemReset+0x24>)
 8000160:	4313      	orrs	r3, r2
 8000162:	60cb      	str	r3, [r1, #12]
 8000164:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000168:	bf00      	nop
 800016a:	e7fd      	b.n	8000168 <__NVIC_SystemReset+0x1c>
 800016c:	e000ed00 	.word	0xe000ed00
 8000170:	05fa0004 	.word	0x05fa0004

08000174 <bootloaderInit>:
extern TIM_HandleTypeDef htim1;



void bootloaderInit()
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
	Flashed_offset = 0; // we flash nothing yet set to 0
 800017a:	4b20      	ldr	r3, [pc, #128]	; (80001fc <bootloaderInit+0x88>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
	flashStatus = Unerased; // we erase nothing yet set Unerased
 8000180:	4b1f      	ldr	r3, [pc, #124]	; (8000200 <bootloaderInit+0x8c>)
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]


	if(readWord(BOOTLOADER_MODE_SET_ADDRESS) == 0xC0FFEE00)
 8000186:	481f      	ldr	r0, [pc, #124]	; (8000204 <bootloaderInit+0x90>)
 8000188:	f000 f890 	bl	80002ac <readWord>
 800018c:	4602      	mov	r2, r0
 800018e:	4b1e      	ldr	r3, [pc, #120]	; (8000208 <bootloaderInit+0x94>)
 8000190:	429a      	cmp	r2, r3
 8000192:	d103      	bne.n	800019c <bootloaderInit+0x28>
	{

		bootloaderMode = FlashMode;
 8000194:	4b1d      	ldr	r3, [pc, #116]	; (800020c <bootloaderInit+0x98>)
 8000196:	2201      	movs	r2, #1
 8000198:	701a      	strb	r2, [r3, #0]
 800019a:	e002      	b.n	80001a2 <bootloaderInit+0x2e>
	}
	else
	{
		bootloaderMode =JumpMode;
 800019c:	4b1b      	ldr	r3, [pc, #108]	; (800020c <bootloaderInit+0x98>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
	}



	if(bootloaderMode == JumpMode)
 80001a2:	4b1a      	ldr	r3, [pc, #104]	; (800020c <bootloaderInit+0x98>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d123      	bne.n	80001f2 <bootloaderInit+0x7e>
	{

			//Check if the application is there
			uint8_t emptyCellCount = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i=0; i<10; i++)
 80001ae:	2300      	movs	r3, #0
 80001b0:	71bb      	strb	r3, [r7, #6]
 80001b2:	e012      	b.n	80001da <bootloaderInit+0x66>
			{
				if(readWord(APP1_START + (i*4)) == -1) // -1 stand for 0XFFFFFFFF
 80001b4:	79bb      	ldrb	r3, [r7, #6]
 80001b6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80001ba:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 f873 	bl	80002ac <readWord>
 80001c6:	4603      	mov	r3, r0
 80001c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001cc:	d102      	bne.n	80001d4 <bootloaderInit+0x60>
					emptyCellCount++;
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	3301      	adds	r3, #1
 80001d2:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i=0; i<10; i++)
 80001d4:	79bb      	ldrb	r3, [r7, #6]
 80001d6:	3301      	adds	r3, #1
 80001d8:	71bb      	strb	r3, [r7, #6]
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	2b09      	cmp	r3, #9
 80001de:	d9e9      	bls.n	80001b4 <bootloaderInit+0x40>
			}

			if(emptyCellCount != 10)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b0a      	cmp	r3, #10
 80001e4:	d003      	beq.n	80001ee <bootloaderInit+0x7a>
			{

				jumpToApp(APP1_START);
 80001e6:	480a      	ldr	r0, [pc, #40]	; (8000210 <bootloaderInit+0x9c>)
 80001e8:	f000 f932 	bl	8000450 <jumpToApp>
	}
	else
	{

	}
}
 80001ec:	e001      	b.n	80001f2 <bootloaderInit+0x7e>
				errorJump();
 80001ee:	f000 fa54 	bl	800069a <errorJump>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000038 	.word	0x20000038
 8000200:	20000034 	.word	0x20000034
 8000204:	08002c00 	.word	0x08002c00
 8000208:	c0ffee00 	.word	0xc0ffee00
 800020c:	20000036 	.word	0x20000036
 8000210:	08003000 	.word	0x08003000

08000214 <flashWord>:


int flashWord(uint32_t dataToFlash)
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b087      	sub	sp, #28
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	if(flashStatus == Unlocked)
 800021c:	4b20      	ldr	r3, [pc, #128]	; (80002a0 <flashWord+0x8c>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b02      	cmp	r3, #2
 8000222:	d132      	bne.n	800028a <flashWord+0x76>
	{
	  volatile HAL_StatusTypeDef status;
	  uint8_t flash_attempt = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	75fb      	strb	r3, [r7, #23]
	  uint32_t address;
	  do
	  {

		  address = APP1_START + Flashed_offset;
 8000228:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <flashWord+0x90>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000230:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000234:	613b      	str	r3, [r7, #16]
		  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, dataToFlash);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f04f 0400 	mov.w	r4, #0
 800023c:	461a      	mov	r2, r3
 800023e:	4623      	mov	r3, r4
 8000240:	6939      	ldr	r1, [r7, #16]
 8000242:	2002      	movs	r0, #2
 8000244:	f001 fd5e 	bl	8001d04 <HAL_FLASH_Program>
 8000248:	4603      	mov	r3, r0
 800024a:	73fb      	strb	r3, [r7, #15]
		  flash_attempt++;
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	3301      	adds	r3, #1
 8000250:	75fb      	strb	r3, [r7, #23]
	  }while(status != HAL_OK && flash_attempt < 10 && dataToFlash == readWord(address));
 8000252:	7bfb      	ldrb	r3, [r7, #15]
 8000254:	b2db      	uxtb	r3, r3
 8000256:	2b00      	cmp	r3, #0
 8000258:	d009      	beq.n	800026e <flashWord+0x5a>
 800025a:	7dfb      	ldrb	r3, [r7, #23]
 800025c:	2b09      	cmp	r3, #9
 800025e:	d806      	bhi.n	800026e <flashWord+0x5a>
 8000260:	6938      	ldr	r0, [r7, #16]
 8000262:	f000 f823 	bl	80002ac <readWord>
 8000266:	4602      	mov	r2, r0
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4293      	cmp	r3, r2
 800026c:	d0dc      	beq.n	8000228 <flashWord+0x14>
	  if(status != HAL_OK)
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	b2db      	uxtb	r3, r3
 8000272:	2b00      	cmp	r3, #0
 8000274:	d002      	beq.n	800027c <flashWord+0x68>
	  {
		  return -1;
 8000276:	f04f 33ff 	mov.w	r3, #4294967295
 800027a:	e00c      	b.n	8000296 <flashWord+0x82>

	  }else
	  {//Word Flash Successful
		  Flashed_offset += 4;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <flashWord+0x90>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3304      	adds	r3, #4
 8000282:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <flashWord+0x90>)
 8000284:	6013      	str	r3, [r2, #0]

		  return 0;
 8000286:	2300      	movs	r3, #0
 8000288:	e005      	b.n	8000296 <flashWord+0x82>
	  }
	}else
	{
	  serial_send((uint8_t*)&"Error: Memory not unlocked nor erased!\n", strlen("Error: Memory not unlocked nor erased!\n"));
 800028a:	2127      	movs	r1, #39	; 0x27
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <flashWord+0x94>)
 800028e:	f000 f9b1 	bl	80005f4 <serial_send>
	  return -2;
 8000292:	f06f 0301 	mvn.w	r3, #1
	}
}
 8000296:	4618      	mov	r0, r3
 8000298:	371c      	adds	r7, #28
 800029a:	46bd      	mov	sp, r7
 800029c:	bd90      	pop	{r4, r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000034 	.word	0x20000034
 80002a4:	20000038 	.word	0x20000038
 80002a8:	0800430c 	.word	0x0800430c

080002ac <readWord>:

uint32_t readWord(uint32_t address)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	uint32_t read_data;
	read_data = *(uint32_t*)(address);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	60fb      	str	r3, [r7, #12]
	return read_data;
 80002ba:	68fb      	ldr	r3, [r7, #12]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <eraseMemory>:

void eraseMemory(uint32_t nb_pageToerase)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	/* Unock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Unlock()!=HAL_OK)
 80002d0:	e005      	b.n	80002de <eraseMemory+0x16>
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 80002d2:	bf00      	nop
 80002d4:	f001 fdac 	bl	8001e30 <HAL_FLASH_Lock>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1fa      	bne.n	80002d4 <eraseMemory+0xc>
	while(HAL_FLASH_Unlock()!=HAL_OK)
 80002de:	f001 fd81 	bl	8001de4 <HAL_FLASH_Unlock>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d1f4      	bne.n	80002d2 <eraseMemory+0xa>

	/* Allow Access to option bytes sector */
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 80002e8:	e005      	b.n	80002f6 <eraseMemory+0x2e>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 80002ea:	bf00      	nop
 80002ec:	f001 fdcc 	bl	8001e88 <HAL_FLASH_OB_Lock>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d1fa      	bne.n	80002ec <eraseMemory+0x24>
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 80002f6:	f001 fdab 	bl	8001e50 <HAL_FLASH_OB_Unlock>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1f4      	bne.n	80002ea <eraseMemory+0x22>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]

	EraseInitStruct.PageAddress = APP1_START;
 8000304:	4b19      	ldr	r3, [pc, #100]	; (800036c <eraseMemory+0xa4>)
 8000306:	61bb      	str	r3, [r7, #24]

	EraseInitStruct.NbPages = nb_pageToerase;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	61fb      	str	r3, [r7, #28]
	uint32_t PageError;

	volatile HAL_StatusTypeDef status_erase;
	status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800030c:	f107 020c 	add.w	r2, r7, #12
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4611      	mov	r1, r2
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fe78 	bl	800200c <HAL_FLASHEx_Erase>
 800031c:	4603      	mov	r3, r0
 800031e:	72fb      	strb	r3, [r7, #11]

	/* Lock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Lock()!=HAL_OK)
 8000320:	e005      	b.n	800032e <eraseMemory+0x66>
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 8000322:	bf00      	nop
 8000324:	f001 fd5e 	bl	8001de4 <HAL_FLASH_Unlock>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d1fa      	bne.n	8000324 <eraseMemory+0x5c>
	while(HAL_FLASH_Lock()!=HAL_OK)
 800032e:	f001 fd7f 	bl	8001e30 <HAL_FLASH_Lock>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f4      	bne.n	8000322 <eraseMemory+0x5a>

	/* Lock Access to option bytes sector */
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000338:	e005      	b.n	8000346 <eraseMemory+0x7e>
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 800033a:	bf00      	nop
 800033c:	f001 fd88 	bl	8001e50 <HAL_FLASH_OB_Unlock>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d1fa      	bne.n	800033c <eraseMemory+0x74>
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000346:	f001 fd9f 	bl	8001e88 <HAL_FLASH_OB_Lock>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1f4      	bne.n	800033a <eraseMemory+0x72>

	if(status_erase != HAL_OK)
 8000350:	7afb      	ldrb	r3, [r7, #11]
 8000352:	b2db      	uxtb	r3, r3
 8000354:	2b00      	cmp	r3, #0
 8000356:	d002      	beq.n	800035e <eraseMemory+0x96>
		//errorBlink();
	flashStatus = Erased;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <eraseMemory+0xa8>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
	Flashed_offset = 0;
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <eraseMemory+0xac>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
}
 8000364:	bf00      	nop
 8000366:	3720      	adds	r7, #32
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	08003000 	.word	0x08003000
 8000370:	20000034 	.word	0x20000034
 8000374:	20000038 	.word	0x20000038

08000378 <unlockFlashAndEraseMemory>:

void unlockFlashAndEraseMemory(uint32_t nb_pageToerase)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	/* Unock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Unlock()!=HAL_OK)
 8000380:	e005      	b.n	800038e <unlockFlashAndEraseMemory+0x16>
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 8000382:	bf00      	nop
 8000384:	f001 fd54 	bl	8001e30 <HAL_FLASH_Lock>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1fa      	bne.n	8000384 <unlockFlashAndEraseMemory+0xc>
	while(HAL_FLASH_Unlock()!=HAL_OK)
 800038e:	f001 fd29 	bl	8001de4 <HAL_FLASH_Unlock>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d1f4      	bne.n	8000382 <unlockFlashAndEraseMemory+0xa>

	/* Allow Access to option bytes sector */
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 8000398:	e005      	b.n	80003a6 <unlockFlashAndEraseMemory+0x2e>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 800039a:	bf00      	nop
 800039c:	f001 fd74 	bl	8001e88 <HAL_FLASH_OB_Lock>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d1fa      	bne.n	800039c <unlockFlashAndEraseMemory+0x24>
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 80003a6:	f001 fd53 	bl	8001e50 <HAL_FLASH_OB_Unlock>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d1f4      	bne.n	800039a <unlockFlashAndEraseMemory+0x22>

	if(flashStatus != Erased)
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <unlockFlashAndEraseMemory+0x84>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d017      	beq.n	80003e8 <unlockFlashAndEraseMemory+0x70>
	{
		/* Fill EraseInit structure*/
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]

		EraseInitStruct.PageAddress = APP1_START;
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <unlockFlashAndEraseMemory+0x88>)
 80003be:	61bb      	str	r3, [r7, #24]

		EraseInitStruct.NbPages = nb_pageToerase;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	61fb      	str	r3, [r7, #28]
		uint32_t PageError;

		volatile HAL_StatusTypeDef status_erase;
		status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80003c4:	f107 020c 	add.w	r2, r7, #12
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4611      	mov	r1, r2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fe1c 	bl	800200c <HAL_FLASHEx_Erase>
 80003d4:	4603      	mov	r3, r0
 80003d6:	72fb      	strb	r3, [r7, #11]

		if(status_erase != HAL_OK)
 80003d8:	7afb      	ldrb	r3, [r7, #11]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d003      	beq.n	80003e8 <unlockFlashAndEraseMemory+0x70>
		{
			serial_send((uint8_t*)&"error during erasing\n", strlen("error during erasing\n"));
 80003e0:	2115      	movs	r1, #21
 80003e2:	4808      	ldr	r0, [pc, #32]	; (8000404 <unlockFlashAndEraseMemory+0x8c>)
 80003e4:	f000 f906 	bl	80005f4 <serial_send>
		}
	}

	flashStatus = Unlocked;
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <unlockFlashAndEraseMemory+0x84>)
 80003ea:	2202      	movs	r2, #2
 80003ec:	701a      	strb	r2, [r3, #0]
	Flashed_offset = 0;
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <unlockFlashAndEraseMemory+0x90>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000034 	.word	0x20000034
 8000400:	08003000 	.word	0x08003000
 8000404:	08004334 	.word	0x08004334
 8000408:	20000038 	.word	0x20000038

0800040c <lockFlash>:

void lockFlash()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	/* Lock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Lock()!=HAL_OK)
 8000410:	e005      	b.n	800041e <lockFlash+0x12>
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 8000412:	bf00      	nop
 8000414:	f001 fce6 	bl	8001de4 <HAL_FLASH_Unlock>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1fa      	bne.n	8000414 <lockFlash+0x8>
	while(HAL_FLASH_Lock()!=HAL_OK)
 800041e:	f001 fd07 	bl	8001e30 <HAL_FLASH_Lock>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1f4      	bne.n	8000412 <lockFlash+0x6>

	/* Lock Access to option bytes sector */
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000428:	e005      	b.n	8000436 <lockFlash+0x2a>
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 800042a:	bf00      	nop
 800042c:	f001 fd10 	bl	8001e50 <HAL_FLASH_OB_Unlock>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1fa      	bne.n	800042c <lockFlash+0x20>
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000436:	f001 fd27 	bl	8001e88 <HAL_FLASH_OB_Lock>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f4      	bne.n	800042a <lockFlash+0x1e>

	flashStatus = Locked;
 8000440:	4b02      	ldr	r3, [pc, #8]	; (800044c <lockFlash+0x40>)
 8000442:	2203      	movs	r2, #3
 8000444:	701a      	strb	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000034 	.word	0x20000034

08000450 <jumpToApp>:

void jumpToApp(const uint32_t address)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	60fb      	str	r3, [r7, #12]

	deinitEverything();
 800045c:	f000 f80c 	bl	8000478 <deinitEverything>

	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	68fa      	ldr	r2, [r7, #12]
 8000466:	6852      	ldr	r2, [r2, #4]
 8000468:	f383 8808 	msr	MSP, r3
 800046c:	4710      	bx	r2
}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <deinitEverything>:

void deinitEverything()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

	//-- reset peripherals to guarantee flawless start of user application
	//TODO : deinit hardware
	__HAL_UART_DISABLE_IT(&huart3,UART_IT_RXNE);
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <deinitEverything+0x74>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	68da      	ldr	r2, [r3, #12]
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <deinitEverything+0x74>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f022 0220 	bic.w	r2, r2, #32
 800048a:	60da      	str	r2, [r3, #12]
	HAL_UART_DeInit(&huart3);
 800048c:	4817      	ldr	r0, [pc, #92]	; (80004ec <deinitEverything+0x74>)
 800048e:	f003 fccf 	bl	8003e30 <HAL_UART_DeInit>
	HAL_TIM_PWM_DeInit(&htim1);
 8000492:	4817      	ldr	r0, [pc, #92]	; (80004f0 <deinitEverything+0x78>)
 8000494:	f002 fd7d 	bl	8002f92 <HAL_TIM_PWM_DeInit>
	HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 8000498:	200c      	movs	r0, #12
 800049a:	f001 f958 	bl	800174e <HAL_NVIC_DisableIRQ>
	__HAL_RCC_DMA1_CLK_DISABLE();
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <deinitEverything+0x7c>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <deinitEverything+0x7c>)
 80004a4:	f023 0301 	bic.w	r3, r3, #1
 80004a8:	6153      	str	r3, [r2, #20]
	__HAL_RCC_GPIOA_CLK_DISABLE();
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <deinitEverything+0x7c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <deinitEverything+0x7c>)
 80004b0:	f023 0304 	bic.w	r3, r3, #4
 80004b4:	6193      	str	r3, [r2, #24]
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <deinitEverything+0x7c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <deinitEverything+0x7c>)
 80004bc:	f023 0308 	bic.w	r3, r3, #8
 80004c0:	6193      	str	r3, [r2, #24]
	__HAL_RCC_GPIOD_CLK_DISABLE();
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <deinitEverything+0x7c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <deinitEverything+0x7c>)
 80004c8:	f023 0320 	bic.w	r3, r3, #32
 80004cc:	6193      	str	r3, [r2, #24]
	HAL_RCC_DeInit();
 80004ce:	f002 f85b 	bl	8002588 <HAL_RCC_DeInit>
	HAL_DeInit();
 80004d2:	f000 ff8d 	bl	80013f0 <HAL_DeInit>
	SysTick->CTRL = 0;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <deinitEverything+0x80>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <deinitEverything+0x80>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <deinitEverything+0x80>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000084 	.word	0x20000084
 80004f0:	200000c4 	.word	0x200000c4
 80004f4:	40021000 	.word	0x40021000
 80004f8:	e000e010 	.word	0xe000e010

080004fc <clear_flashmode_flag>:

void clear_flashmode_flag(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	/* Unock the Flash to enable the flash control register access *************/
		while(HAL_FLASH_Unlock()!=HAL_OK)
 8000502:	e005      	b.n	8000510 <clear_flashmode_flag+0x14>
			while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 8000504:	bf00      	nop
 8000506:	f001 fc93 	bl	8001e30 <HAL_FLASH_Lock>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1fa      	bne.n	8000506 <clear_flashmode_flag+0xa>
		while(HAL_FLASH_Unlock()!=HAL_OK)
 8000510:	f001 fc68 	bl	8001de4 <HAL_FLASH_Unlock>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f4      	bne.n	8000504 <clear_flashmode_flag+0x8>

		/* Allow Access to option bytes sector */
		while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 800051a:	e005      	b.n	8000528 <clear_flashmode_flag+0x2c>
			while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 800051c:	bf00      	nop
 800051e:	f001 fcb3 	bl	8001e88 <HAL_FLASH_OB_Lock>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1fa      	bne.n	800051e <clear_flashmode_flag+0x22>
		while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 8000528:	f001 fc92 	bl	8001e50 <HAL_FLASH_OB_Unlock>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1f4      	bne.n	800051c <clear_flashmode_flag+0x20>

		/* Fill EraseInit structure*/
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]

		EraseInitStruct.PageAddress = BOOTLOADER_MODE_SET_ADDRESS;
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <clear_flashmode_flag+0x90>)
 8000538:	613b      	str	r3, [r7, #16]

		EraseInitStruct.NbPages = 1;
 800053a:	2301      	movs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
		uint32_t PageError;

		volatile HAL_StatusTypeDef status_erase;
		status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800053e:	1d3a      	adds	r2, r7, #4
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f001 fd60 	bl	800200c <HAL_FLASHEx_Erase>
 800054c:	4603      	mov	r3, r0
 800054e:	70fb      	strb	r3, [r7, #3]

		/* Lock the Flash to enable the flash control register access *************/
		while(HAL_FLASH_Lock()!=HAL_OK)
 8000550:	e005      	b.n	800055e <clear_flashmode_flag+0x62>
			while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 8000552:	bf00      	nop
 8000554:	f001 fc46 	bl	8001de4 <HAL_FLASH_Unlock>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1fa      	bne.n	8000554 <clear_flashmode_flag+0x58>
		while(HAL_FLASH_Lock()!=HAL_OK)
 800055e:	f001 fc67 	bl	8001e30 <HAL_FLASH_Lock>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1f4      	bne.n	8000552 <clear_flashmode_flag+0x56>

		/* Lock Access to option bytes sector */
		while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000568:	e005      	b.n	8000576 <clear_flashmode_flag+0x7a>
			while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 800056a:	bf00      	nop
 800056c:	f001 fc70 	bl	8001e50 <HAL_FLASH_OB_Unlock>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1fa      	bne.n	800056c <clear_flashmode_flag+0x70>
		while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000576:	f001 fc87 	bl	8001e88 <HAL_FLASH_OB_Lock>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1f4      	bne.n	800056a <clear_flashmode_flag+0x6e>

		if(status_erase != HAL_OK)
 8000580:	78fb      	ldrb	r3, [r7, #3]
		{
			//errorBlink();
		}
}
 8000582:	bf00      	nop
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	08002c00 	.word	0x08002c00

08000590 <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000590:	b480      	push	{r7}
 8000592:	b087      	sub	sp, #28
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	4613      	mov	r3, r2
 800059c:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 800059e:	2300      	movs	r3, #0
 80005a0:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	75bb      	strb	r3, [r7, #22]
 80005a6:	e012      	b.n	80005ce <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 80005a8:	7dbb      	ldrb	r3, [r7, #22]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	7dbb      	ldrb	r3, [r7, #22]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	440b      	add	r3, r1
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d103      	bne.n	80005c4 <string_compare+0x34>
	   	  		  comVAR++;
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	3301      	adds	r3, #1
 80005c0:	75fb      	strb	r3, [r7, #23]
 80005c2:	e001      	b.n	80005c8 <string_compare+0x38>
	   	  	  else comVAR=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80005c8:	7dbb      	ldrb	r3, [r7, #22]
 80005ca:	3301      	adds	r3, #1
 80005cc:	75bb      	strb	r3, [r7, #22]
 80005ce:	7dbb      	ldrb	r3, [r7, #22]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	88fa      	ldrh	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d8e7      	bhi.n	80005a8 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d101      	bne.n	80005e6 <string_compare+0x56>
		 	return 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e000      	b.n	80005e8 <string_compare+0x58>
	 else 	return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	371c      	adds	r7, #28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
	...

080005f4 <serial_send>:

void serial_send(uint8_t * Buf, uint16_t length)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
	 HAL_UART_Transmit(&huart3,Buf,length,50);
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	2332      	movs	r3, #50	; 0x32
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <serial_send+0x20>)
 8000608:	f003 fc3e 	bl	8003e88 <HAL_UART_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000084 	.word	0x20000084

08000618 <write_big_packet_flash>:

int write_big_packet_flash(uint8_t * Buf)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	uint8_t *start_addr = &Buf[1]; // we skip "#"
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
	uint16_t buffer_idx = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	82fb      	strh	r3, [r7, #22]
	 for(int i =0;i<(UPLOAD_PACKET_SIZE/4);i++)
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	e02c      	b.n	800068a <write_big_packet_flash+0x72>
		/* uint8_t a = (start_addr[3+buffer_idx]);
		 uint8_t b = (start_addr[2+buffer_idx]) ;
		 uint8_t c =  (start_addr[1+buffer_idx]);
		 uint8_t d = start_addr[0+buffer_idx]; */

		 uint32_t dataToFlash = (start_addr[3+buffer_idx]<<24) +
 8000630:	8afb      	ldrh	r3, [r7, #22]
 8000632:	3303      	adds	r3, #3
 8000634:	461a      	mov	r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	061a      	lsls	r2, r3, #24
													  (start_addr[2+buffer_idx]<<16) +
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	3302      	adds	r3, #2
 8000642:	4619      	mov	r1, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	440b      	add	r3, r1
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	041b      	lsls	r3, r3, #16
		 uint32_t dataToFlash = (start_addr[3+buffer_idx]<<24) +
 800064c:	441a      	add	r2, r3
													  (start_addr[1+buffer_idx]<<8) +
 800064e:	8afb      	ldrh	r3, [r7, #22]
 8000650:	3301      	adds	r3, #1
 8000652:	4619      	mov	r1, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	440b      	add	r3, r1
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	021b      	lsls	r3, r3, #8
													  (start_addr[2+buffer_idx]<<16) +
 800065c:	4413      	add	r3, r2
													  start_addr[0+buffer_idx];//32bit Word contains 4 Bytes
 800065e:	8afa      	ldrh	r2, [r7, #22]
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	440a      	add	r2, r1
 8000664:	7812      	ldrb	r2, [r2, #0]
													  (start_addr[1+buffer_idx]<<8) +
 8000666:	4413      	add	r3, r2
		 uint32_t dataToFlash = (start_addr[3+buffer_idx]<<24) +
 8000668:	60bb      	str	r3, [r7, #8]


		 if(flashWord(dataToFlash) == -1)
 800066a:	68b8      	ldr	r0, [r7, #8]
 800066c:	f7ff fdd2 	bl	8000214 <flashWord>
 8000670:	4603      	mov	r3, r0
 8000672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000676:	d102      	bne.n	800067e <write_big_packet_flash+0x66>
		 {
			return -1;
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	e009      	b.n	8000692 <write_big_packet_flash+0x7a>

		/* if(i == 0)
		 {
			 uint8_t debug_purpose_only =1;
		 }*/
		 buffer_idx += 4;
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	3304      	adds	r3, #4
 8000682:	82fb      	strh	r3, [r7, #22]
	 for(int i =0;i<(UPLOAD_PACKET_SIZE/4);i++)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	3301      	adds	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	2b3f      	cmp	r3, #63	; 0x3f
 800068e:	ddcf      	ble.n	8000630 <write_big_packet_flash+0x18>
	 }
	 return 0;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <errorJump>:

void errorJump(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
	while(1)
	{
		 set_All_Leds_color(255,0,0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	f000 fd18 	bl	80010d8 <set_All_Leds_color>
		 led_update();
 80006a8:	f000 fdd4 	bl	8001254 <led_update>
		 HAL_Delay(500);
 80006ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b0:	f000 ff08 	bl	80014c4 <HAL_Delay>
		 set_All_Leds_color(0,0,0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fd0d 	bl	80010d8 <set_All_Leds_color>
		 led_update();
 80006be:	f000 fdc9 	bl	8001254 <led_update>
		 HAL_Delay(500);
 80006c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c6:	f000 fefd 	bl	80014c4 <HAL_Delay>
		 set_All_Leds_color(255,0,0);
 80006ca:	e7e8      	b.n	800069e <errorJump+0x4>

080006cc <messageHandler>:
	}
}


int messageHandler(uint8_t* Buf, uint16_t length)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
	uint32_t page_to_erase_nb = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
	if((length > 6 ) && (length < 18) ) // we assume all commands have a length greater than 6
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	2b06      	cmp	r3, #6
 80006e0:	f240 80ad 	bls.w	800083e <messageHandler+0x172>
 80006e4:	887b      	ldrh	r3, [r7, #2]
 80006e6:	2b11      	cmp	r3, #17
 80006e8:	f200 80a9 	bhi.w	800083e <messageHandler+0x172>
	{

//length = length -1; // remove the '!'

		if(string_compare((char*)Buf, ERASE_FLASH_MEMORY, strlen(ERASE_FLASH_MEMORY))
 80006ec:	220a      	movs	r2, #10
 80006ee:	4956      	ldr	r1, [pc, #344]	; (8000848 <messageHandler+0x17c>)
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ff4d 	bl	8000590 <string_compare>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d027      	beq.n	800074c <messageHandler+0x80>
				&& flashStatus != Unlocked)
 80006fc:	4b53      	ldr	r3, [pc, #332]	; (800084c <messageHandler+0x180>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d023      	beq.n	800074c <messageHandler+0x80>
		{
			page_to_erase_nb = (Buf[length-2]<<24) +(Buf[length-3]<<16) +(Buf[length-4]<<8) +Buf[length-5];//32bit Word contains 4 Bytes
 8000704:	887b      	ldrh	r3, [r7, #2]
 8000706:	3b02      	subs	r3, #2
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	061a      	lsls	r2, r3, #24
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	3b03      	subs	r3, #3
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	440b      	add	r3, r1
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	041b      	lsls	r3, r3, #16
 800071c:	441a      	add	r2, r3
 800071e:	887b      	ldrh	r3, [r7, #2]
 8000720:	3b04      	subs	r3, #4
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	440b      	add	r3, r1
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	4413      	add	r3, r2
 800072c:	887a      	ldrh	r2, [r7, #2]
 800072e:	3a05      	subs	r2, #5
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	440a      	add	r2, r1
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	4413      	add	r3, r2
 8000738:	60bb      	str	r3, [r7, #8]
			eraseMemory(page_to_erase_nb);
 800073a:	68b8      	ldr	r0, [r7, #8]
 800073c:	f7ff fdc4 	bl	80002c8 <eraseMemory>
			//CDC_Transmit_FS((uint8_t*)&"Flash: Erased!\n", strlen("Flash: Erased!\n"));
			serial_send((uint8_t*)&"Flash: Erased!\n", strlen("Flash: Erased!\n"));
 8000740:	210f      	movs	r1, #15
 8000742:	4843      	ldr	r0, [pc, #268]	; (8000850 <messageHandler+0x184>)
 8000744:	f7ff ff56 	bl	80005f4 <serial_send>
			return 1;
 8000748:	2301      	movs	r3, #1
 800074a:	e079      	b.n	8000840 <messageHandler+0x174>
		}
		else if(string_compare((char*)Buf, FLASHING_START, strlen(FLASHING_START)))
 800074c:	220c      	movs	r2, #12
 800074e:	4941      	ldr	r1, [pc, #260]	; (8000854 <messageHandler+0x188>)
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff1d 	bl	8000590 <string_compare>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d026      	beq.n	80007aa <messageHandler+0xde>
		{
			page_to_erase_nb = (Buf[length-2]<<24) +(Buf[length-3]<<16) +(Buf[length-4]<<8) +Buf[length-5];//32bit Word contains 4 Bytes
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	3b02      	subs	r3, #2
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	061a      	lsls	r2, r3, #24
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	3b03      	subs	r3, #3
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	440b      	add	r3, r1
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	041b      	lsls	r3, r3, #16
 8000774:	441a      	add	r2, r3
 8000776:	887b      	ldrh	r3, [r7, #2]
 8000778:	3b04      	subs	r3, #4
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	440b      	add	r3, r1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	4413      	add	r3, r2
 8000784:	887a      	ldrh	r2, [r7, #2]
 8000786:	3a05      	subs	r2, #5
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	440a      	add	r2, r1
 800078c:	7812      	ldrb	r2, [r2, #0]
 800078e:	4413      	add	r3, r2
 8000790:	60bb      	str	r3, [r7, #8]
			unlockFlashAndEraseMemory(page_to_erase_nb);
 8000792:	68b8      	ldr	r0, [r7, #8]
 8000794:	f7ff fdf0 	bl	8000378 <unlockFlashAndEraseMemory>
			//CDC_Transmit_FS((uint8_t*)&"Flash: Unlocked!\n", strlen("Flash: Unlocked!\n"));
 			writed_packet = 0;
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <messageHandler+0x18c>)
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
			serial_send((uint8_t*)&"Flash: Unlocked!\n", strlen("Flash: Unlocked!\n"));
 800079e:	2111      	movs	r1, #17
 80007a0:	482e      	ldr	r0, [pc, #184]	; (800085c <messageHandler+0x190>)
 80007a2:	f7ff ff27 	bl	80005f4 <serial_send>
			return 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e04a      	b.n	8000840 <messageHandler+0x174>
		}
		else if(string_compare((char*)Buf, FLASHING_FINISH, strlen(FLASHING_FINISH))
 80007aa:	220e      	movs	r2, #14
 80007ac:	492c      	ldr	r1, [pc, #176]	; (8000860 <messageHandler+0x194>)
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff feee 	bl	8000590 <string_compare>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d02a      	beq.n	8000810 <messageHandler+0x144>
				  && flashStatus == Unlocked)
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <messageHandler+0x180>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d126      	bne.n	8000810 <messageHandler+0x144>
		{
			lockFlash();
 80007c2:	f7ff fe23 	bl	800040c <lockFlash>
			//TODO : set BOOTLOADER_MODE_SET_ADDRESS to 0XFFFFFFFF to put bootloader in jumpmode after reset
			//CDC_Transmit_FS((uint8_t*)&"Flash: Success!\n", strlen("Flash: Success!\n"));
			serial_send((uint8_t*)&"Flash: Success! Rebooting ! \n", strlen("Flash: Success! Rebooting ! \n"));
 80007c6:	211d      	movs	r1, #29
 80007c8:	4826      	ldr	r0, [pc, #152]	; (8000864 <messageHandler+0x198>)
 80007ca:	f7ff ff13 	bl	80005f4 <serial_send>
			clear_flashmode_flag();
 80007ce:	f7ff fe95 	bl	80004fc <clear_flashmode_flag>
			for(uint8_t i = 0;i < 5;i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e016      	b.n	8000806 <messageHandler+0x13a>
			{
				set_All_Leds_color(0,255,0);
 80007d8:	2200      	movs	r2, #0
 80007da:	21ff      	movs	r1, #255	; 0xff
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 fc7b 	bl	80010d8 <set_All_Leds_color>
				led_update();
 80007e2:	f000 fd37 	bl	8001254 <led_update>
				HAL_Delay(100);
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f000 fe6c 	bl	80014c4 <HAL_Delay>
				set_All_Leds_color(0,255,0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	21ff      	movs	r1, #255	; 0xff
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fc71 	bl	80010d8 <set_All_Leds_color>
			    led_update();
 80007f6:	f000 fd2d 	bl	8001254 <led_update>
				HAL_Delay(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f000 fe62 	bl	80014c4 <HAL_Delay>
			for(uint8_t i = 0;i < 5;i++)
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3301      	adds	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b04      	cmp	r3, #4
 800080a:	d9e5      	bls.n	80007d8 <messageHandler+0x10c>
			}
			NVIC_SystemReset();
 800080c:	f7ff fc9e 	bl	800014c <__NVIC_SystemReset>

		}
		else if(string_compare((char*)Buf, FLASHING_ABORT, strlen(FLASHING_ABORT))
 8000810:	220d      	movs	r2, #13
 8000812:	4915      	ldr	r1, [pc, #84]	; (8000868 <messageHandler+0x19c>)
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff febb 	bl	8000590 <string_compare>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00e      	beq.n	800083e <messageHandler+0x172>
				  && flashStatus == Unlocked)
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <messageHandler+0x180>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d10a      	bne.n	800083e <messageHandler+0x172>
		{
			lockFlash();
 8000828:	f7ff fdf0 	bl	800040c <lockFlash>
			eraseMemory(page_to_erase_nb);
 800082c:	68b8      	ldr	r0, [r7, #8]
 800082e:	f7ff fd4b 	bl	80002c8 <eraseMemory>
			//CDC_Transmit_FS((uint8_t*)&"Flash: Aborted!\n", strlen("Flash: Aborted!\n"));
			serial_send((uint8_t*)&"Flash: Aborted!\n", strlen("Flash: Aborted!\n"));
 8000832:	2110      	movs	r1, #16
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <messageHandler+0x1a0>)
 8000836:	f7ff fedd 	bl	80005f4 <serial_send>
			return 1;
 800083a:	2301      	movs	r3, #1
 800083c:	e000      	b.n	8000840 <messageHandler+0x174>
			//	  strlen("Error: Incorrect step or unknown command!\n"));
			serial_send((uint8_t*)&"Error: Incorrect step or unknown command!\n", strlen("Error: Incorrect step or unknown command!\n"));
			return 0;
		}*/
	}
	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	0800434c 	.word	0x0800434c
 800084c:	20000034 	.word	0x20000034
 8000850:	08004358 	.word	0x08004358
 8000854:	08004368 	.word	0x08004368
 8000858:	2000003c 	.word	0x2000003c
 800085c:	08004378 	.word	0x08004378
 8000860:	0800438c 	.word	0x0800438c
 8000864:	0800439c 	.word	0x0800439c
 8000868:	080043bc 	.word	0x080043bc
 800086c:	080043cc 	.word	0x080043cc

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//led animation vars
	uint8_t led_sens = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	71fb      	strb	r3, [r7, #7]
	uint8_t led_idx =0;
 800087a:	2300      	movs	r3, #0
 800087c:	71bb      	strb	r3, [r7, #6]
	uint32_t led_tickstart = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f000 fd9f 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f8a7 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 f9bd 	bl	8000c08 <MX_GPIO_Init>
  MX_DMA_Init();
 800088e:	f000 f99d 	bl	8000bcc <MX_DMA_Init>
  MX_TIM1_Init();
 8000892:	f000 f8e7 	bl	8000a64 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000896:	f000 f967 	bl	8000b68 <MX_USART3_UART_Init>
  HAL_Delay(1);
 800089a:	2001      	movs	r0, #1
 800089c:	f000 fe12 	bl	80014c4 <HAL_Delay>
  set_All_Leds_color(0,0,255);
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	2100      	movs	r1, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 fc17 	bl	80010d8 <set_All_Leds_color>
  led_update();
 80008aa:	f000 fcd3 	bl	8001254 <led_update>

  /* USER CODE BEGIN 2 */
  serial_send((uint8_t*)&"PJ bootloader start\n", strlen("PJ bootloader start\n"));
 80008ae:	2114      	movs	r1, #20
 80008b0:	4840      	ldr	r0, [pc, #256]	; (80009b4 <main+0x144>)
 80008b2:	f7ff fe9f 	bl	80005f4 <serial_send>
  bootloaderInit();
 80008b6:	f7ff fc5d 	bl	8000174 <bootloaderInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(g_chunk_rdy == 1) //firmware update process
 80008ba:	4b3f      	ldr	r3, [pc, #252]	; (80009b8 <main+0x148>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d13b      	bne.n	800093c <main+0xcc>
	  {



		  if(write_big_packet_flash(UART3_IT_buffer) == 0)
 80008c4:	483d      	ldr	r0, [pc, #244]	; (80009bc <main+0x14c>)
 80008c6:	f7ff fea7 	bl	8000618 <write_big_packet_flash>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d11d      	bne.n	800090c <main+0x9c>
		  {

			  writed_packet++;
 80008d0:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <main+0x150>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <main+0x150>)
 80008d8:	6013      	str	r3, [r2, #0]
			  memset(UART3_IT_buffer,0,UPLOAD_FRAME_SIZE);
 80008da:	f44f 7281 	mov.w	r2, #258	; 0x102
 80008de:	2100      	movs	r1, #0
 80008e0:	4836      	ldr	r0, [pc, #216]	; (80009bc <main+0x14c>)
 80008e2:	f003 fcff 	bl	80042e4 <memset>
			  UART3_byte_counter = 0; // we reset the buffer index
 80008e6:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <main+0x154>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	801a      	strh	r2, [r3, #0]


			  g_chunk_rdy = 0 ;
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <main+0x148>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
			  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);// we set back uart  RX interupt for next packet
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <main+0x158>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <main+0x158>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f042 0220 	orr.w	r2, r2, #32
 8000900:	60da      	str	r2, [r3, #12]
			  serial_send((uint8_t*)&"Flash: OK\n", strlen("Flash: OK\n")); // UPLOAD_PACKET_SIZE (256) bytes flashed
 8000902:	210a      	movs	r1, #10
 8000904:	4831      	ldr	r0, [pc, #196]	; (80009cc <main+0x15c>)
 8000906:	f7ff fe75 	bl	80005f4 <serial_send>
 800090a:	e017      	b.n	800093c <main+0xcc>
		  }
		  else
		  {
			  memset(UART3_IT_buffer,0,UPLOAD_FRAME_SIZE);
 800090c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000910:	2100      	movs	r1, #0
 8000912:	482a      	ldr	r0, [pc, #168]	; (80009bc <main+0x14c>)
 8000914:	f003 fce6 	bl	80042e4 <memset>
			  UART3_byte_counter = 0; // we reset the buffer index
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <main+0x154>)
 800091a:	2200      	movs	r2, #0
 800091c:	801a      	strh	r2, [r3, #0]


			  g_chunk_rdy = 0 ;
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <main+0x148>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
			  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);//we set back uart  RX interupt for next packet
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <main+0x158>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <main+0x158>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f042 0220 	orr.w	r2, r2, #32
 8000932:	60da      	str	r2, [r3, #12]
			  serial_send((uint8_t*)&"Flashing Error!\n", strlen("Flashing Error!\n")); // indicate error while trying to flash the last UPLOAD_PACKET_SIZE (256) bytes
 8000934:	2110      	movs	r1, #16
 8000936:	4826      	ldr	r0, [pc, #152]	; (80009d0 <main+0x160>)
 8000938:	f7ff fe5c 	bl	80005f4 <serial_send>

		  }
	  }

	  if(bootloaderMode == FlashMode)// if we are in firmware update mode
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <main+0x164>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d1ba      	bne.n	80008ba <main+0x4a>
	  {
		  if((HAL_GetTick() - led_tickstart) > 200) // if 500 ms have ellapsed update led pattern
 8000944:	f000 fdb4 	bl	80014b0 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2bc8      	cmp	r3, #200	; 0xc8
 8000950:	d9b3      	bls.n	80008ba <main+0x4a>
		  {
			  if(led_sens == 0) //left to right
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10e      	bne.n	8000976 <main+0x106>
			  {
				  set_All_Leds_color(0,0,0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fbbb 	bl	80010d8 <set_All_Leds_color>
				  set_Led_color(led_idx,0,0,255);
 8000962:	79b8      	ldrb	r0, [r7, #6]
 8000964:	23ff      	movs	r3, #255	; 0xff
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	f000 fb8d 	bl	8001088 <set_Led_color>
				  led_idx++;
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	3301      	adds	r3, #1
 8000972:	71bb      	strb	r3, [r7, #6]
 8000974:	e00d      	b.n	8000992 <main+0x122>
			  }
			  else //right to left
			  {
				  set_All_Leds_color(0,0,0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2000      	movs	r0, #0
 800097c:	f000 fbac 	bl	80010d8 <set_All_Leds_color>
				  set_Led_color(led_idx,0,0,255);
 8000980:	79b8      	ldrb	r0, [r7, #6]
 8000982:	23ff      	movs	r3, #255	; 0xff
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	f000 fb7e 	bl	8001088 <set_Led_color>
				  led_idx--;
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	3b01      	subs	r3, #1
 8000990:	71bb      	strb	r3, [r7, #6]
			  }
			  led_update();
 8000992:	f000 fc5f 	bl	8001254 <led_update>
			  if(led_idx == (NUM_LEDS-1)) //change animation sens
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d101      	bne.n	80009a0 <main+0x130>
			  {
				  led_sens = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	71fb      	strb	r3, [r7, #7]
			  }
			  if(led_idx == 0)//change animation sens
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <main+0x13a>
			  {
				  led_sens = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
			  }

			  led_tickstart = HAL_GetTick();
 80009aa:	f000 fd81 	bl	80014b0 <HAL_GetTick>
 80009ae:	6038      	str	r0, [r7, #0]
	  if(g_chunk_rdy == 1) //firmware update process
 80009b0:	e783      	b.n	80008ba <main+0x4a>
 80009b2:	bf00      	nop
 80009b4:	080043e0 	.word	0x080043e0
 80009b8:	2000002c 	.word	0x2000002c
 80009bc:	2000010c 	.word	0x2000010c
 80009c0:	2000003c 	.word	0x2000003c
 80009c4:	2000002e 	.word	0x2000002e
 80009c8:	20000084 	.word	0x20000084
 80009cc:	080043f8 	.word	0x080043f8
 80009d0:	08004404 	.word	0x08004404
 80009d4:	20000036 	.word	0x20000036

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b090      	sub	sp, #64	; 0x40
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	2228      	movs	r2, #40	; 0x28
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 fc7c 	bl	80042e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a16:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fe4b 	bl	80026bc <HAL_RCC_OscConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f926 	bl	8000c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	230f      	movs	r3, #15
 8000a32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	2302      	movs	r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 f8b6 	bl	8002bbc <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a56:	f000 f911 	bl	8000c7c <Error_Handler>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3740      	adds	r7, #64	; 0x40
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b092      	sub	sp, #72	; 0x48
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 fc28 	bl	80042e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000a96:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <MX_TIM1_Init+0x100>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23;
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000aa8:	2217      	movs	r2, #23
 8000aaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000abe:	4828      	ldr	r0, [pc, #160]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000ac0:	f002 fa18 	bl	8002ef4 <HAL_TIM_PWM_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000aca:	f000 f8d7 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ada:	4619      	mov	r1, r3
 8000adc:	4820      	ldr	r0, [pc, #128]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000ade:	f003 f8ab 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000ae8:	f000 f8c8 	bl	8000c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000b12:	f002 fceb 	bl	80034ec <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000b1c:	f000 f8ae 	bl	8000c7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000b44:	f003 f8d6 	bl	8003cf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000b4e:	f000 f895 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <MX_TIM1_Init+0xfc>)
 8000b54:	f000 f914 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 8000b58:	bf00      	nop
 8000b5a:	3748      	adds	r7, #72	; 0x48
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000c4 	.word	0x200000c4
 8000b64:	40012c00 	.word	0x40012c00

08000b68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <MX_USART3_UART_Init+0x60>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000ba0:	f003 f8f9 	bl	8003d96 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f867 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);//enable uart  RX interupt here
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f042 0220 	orr.w	r2, r2, #32
 8000bbc:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000084 	.word	0x20000084
 8000bc8:	40004800 	.word	0x40004800

08000bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_DMA_Init+0x38>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <MX_DMA_Init+0x38>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_DMA_Init+0x38>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 6, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2106      	movs	r1, #6
 8000bee:	200c      	movs	r0, #12
 8000bf0:	f000 fd83 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bf4:	200c      	movs	r0, #12
 8000bf6:	f000 fd9c 	bl	8001732 <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <MX_GPIO_Init+0x70>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]



}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_MspInit+0x5c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_MspInit+0x5c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_MspInit+0x5c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_MspInit+0x5c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_MspInit+0x5c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	61d3      	str	r3, [r2, #28]
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_MspInit+0x5c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_MspInit+0x60>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_MspInit+0x60>)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000

08000cec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <HAL_TIM_PWM_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d133      	bne.n	8000d66 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <HAL_TIM_PWM_MspInit+0x88>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <HAL_TIM_PWM_MspInit+0x88>)
 8000d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <HAL_TIM_PWM_MspInit+0x88>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_TIM_PWM_MspInit+0x90>)
 8000d1a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d1e:	2210      	movs	r2, #16
 8000d20:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d34:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d3c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d40:	2220      	movs	r2, #32
 8000d42:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d4c:	f000 fd1a 	bl	8001784 <HAL_DMA_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000d56:	f7ff ff91 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40012c00 	.word	0x40012c00
 8000d74:	40021000 	.word	0x40021000
 8000d78:	20000040 	.word	0x20000040
 8000d7c:	4002001c 	.word	0x4002001c

08000d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_TIM_MspPostInit+0x60>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d11a      	bne.n	8000dd6 <HAL_TIM_MspPostInit+0x56>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_TIM_MspPostInit+0x64>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_TIM_MspPostInit+0x64>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_TIM_MspPostInit+0x64>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000dd2:	f001 f9c3 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40012c00 	.word	0x40012c00
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_TIM_PWM_MspDeInit+0x30>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10a      	bne.n	8000e14 <HAL_TIM_PWM_MspDeInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_TIM_PWM_MspDeInit+0x34>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_TIM_PWM_MspDeInit+0x34>)
 8000e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e08:	6193      	str	r3, [r2, #24]

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC1]);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fd12 	bl	8001838 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40012c00 	.word	0x40012c00
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <HAL_UART_MspInit+0x9c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d139      	bne.n	8000eb8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <HAL_UART_MspInit+0xa0>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <HAL_UART_MspInit+0xa0>)
 8000e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4e:	61d3      	str	r3, [r2, #28]
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_UART_MspInit+0xa0>)
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_UART_MspInit+0xa0>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0xa0>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_UART_MspInit+0xa0>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	4619      	mov	r1, r3
 8000e88:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <HAL_UART_MspInit+0xa4>)
 8000e8a:	f001 f967 	bl	800215c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <HAL_UART_MspInit+0xa4>)
 8000ea4:	f001 f95a 	bl	800215c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2105      	movs	r1, #5
 8000eac:	2027      	movs	r0, #39	; 0x27
 8000eae:	f000 fc24 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eb2:	2027      	movs	r0, #39	; 0x27
 8000eb4:	f000 fc3d 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40004800 	.word	0x40004800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_UART_MspDeInit+0x38>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10d      	bne.n	8000efa <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_UART_MspDeInit+0x3c>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_UART_MspDeInit+0x3c>)
 8000ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee8:	61d3      	str	r3, [r2, #28]

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8000eea:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <HAL_UART_MspDeInit+0x40>)
 8000ef0:	f001 fa8e 	bl	8002410 <HAL_GPIO_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000ef4:	2027      	movs	r0, #39	; 0x27
 8000ef6:	f000 fc2a 	bl	800174e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40004800 	.word	0x40004800
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010c00 	.word	0x40010c00

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <HardFault_Handler+0x4>

08000f22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <MemManage_Handler+0x4>

08000f28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <BusFault_Handler+0x4>

08000f2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 fa96 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <DMA1_Channel2_IRQHandler+0x10>)
 8000f6a:	f000 fd97 	bl	8001a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000040 	.word	0x20000040

08000f78 <USART3_IRQHandler>:
/**
  * @brief This function handles USART3 global interrupt.
  */

void USART3_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	uint8_t temp ;
	HAL_UART_Receive(&huart3,&temp,1,50);
 8000f7e:	1df9      	adds	r1, r7, #7
 8000f80:	2332      	movs	r3, #50	; 0x32
 8000f82:	2201      	movs	r2, #1
 8000f84:	4836      	ldr	r0, [pc, #216]	; (8001060 <USART3_IRQHandler+0xe8>)
 8000f86:	f003 f811 	bl	8003fac <HAL_UART_Receive>



	 if(temp == '#' || packet_start == 1)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b23      	cmp	r3, #35	; 0x23
 8000f8e:	d003      	beq.n	8000f98 <USART3_IRQHandler+0x20>
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <USART3_IRQHandler+0xec>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d10e      	bne.n	8000fb6 <USART3_IRQHandler+0x3e>
	 {
		 packet_start = 1;
 8000f98:	4b32      	ldr	r3, [pc, #200]	; (8001064 <USART3_IRQHandler+0xec>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
		 UART3_IT_buffer[UART3_byte_counter] = temp;
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <USART3_IRQHandler+0xf0>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	79f9      	ldrb	r1, [r7, #7]
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <USART3_IRQHandler+0xf4>)
 8000fa8:	5499      	strb	r1, [r3, r2]
		 UART3_byte_counter++;
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <USART3_IRQHandler+0xf0>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <USART3_IRQHandler+0xf0>)
 8000fb4:	801a      	strh	r2, [r3, #0]

	 }
	 if(temp == '!')
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b21      	cmp	r3, #33	; 0x21
 8000fba:	d102      	bne.n	8000fc2 <USART3_IRQHandler+0x4a>
	 {
		 packet_end = 1;
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <USART3_IRQHandler+0xf8>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
	 }

	 if(packet_start == 1 && packet_end == 1) // if we got a packet
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <USART3_IRQHandler+0xec>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d13e      	bne.n	8001048 <USART3_IRQHandler+0xd0>
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <USART3_IRQHandler+0xf8>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d13a      	bne.n	8001048 <USART3_IRQHandler+0xd0>
	 {
		 if(flashStatus == Unlocked && UART3_byte_counter == UPLOAD_FRAME_SIZE)  // if the status of flash is "Unlocked" and the packet is size 6
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <USART3_IRQHandler+0xfc>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d11f      	bne.n	800101a <USART3_IRQHandler+0xa2>
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <USART3_IRQHandler+0xf0>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000fe2:	d11a      	bne.n	800101a <USART3_IRQHandler+0xa2>
		 {
			 if(UART3_IT_buffer[0] == '#' && UART3_IT_buffer[UPLOAD_FRAME_SIZE-1] == '!') // if # is at begining and ! precisely at the index 6 --> its a flash packet !
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <USART3_IRQHandler+0xf4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b23      	cmp	r3, #35	; 0x23
 8000fea:	d12c      	bne.n	8001046 <USART3_IRQHandler+0xce>
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <USART3_IRQHandler+0xf4>)
 8000fee:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8000ff2:	2b21      	cmp	r3, #33	; 0x21
 8000ff4:	d127      	bne.n	8001046 <USART3_IRQHandler+0xce>
			 {

				__HAL_UART_DISABLE_IT(&huart3,UART_IT_RXNE);//disable uart  RX interupt here
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <USART3_IRQHandler+0xe8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <USART3_IRQHandler+0xe8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0220 	bic.w	r2, r2, #32
 8001004:	60da      	str	r2, [r3, #12]

				g_chunk_rdy = 1;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <USART3_IRQHandler+0x100>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
				packet_start = 0; //reset the packet status
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <USART3_IRQHandler+0xec>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
				packet_end = 0;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <USART3_IRQHandler+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
			 if(UART3_IT_buffer[0] == '#' && UART3_IT_buffer[UPLOAD_FRAME_SIZE-1] == '!') // if # is at begining and ! precisely at the index 6 --> its a flash packet !
 8001018:	e015      	b.n	8001046 <USART3_IRQHandler+0xce>

			 }
		 }
		 else //maybe its a command ?
		 {
			 if(messageHandler(UART3_IT_buffer,UART3_byte_counter) == 1) // if a command was deteted
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <USART3_IRQHandler+0xf0>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4812      	ldr	r0, [pc, #72]	; (800106c <USART3_IRQHandler+0xf4>)
 8001022:	f7ff fb53 	bl	80006cc <messageHandler>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d108      	bne.n	800103e <USART3_IRQHandler+0xc6>
			 {
				 UART3_byte_counter = 0; // we reset the buffer index
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <USART3_IRQHandler+0xf0>)
 800102e:	2200      	movs	r2, #0
 8001030:	801a      	strh	r2, [r3, #0]
				 packet_start = 0; //reset the packet status
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <USART3_IRQHandler+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
				 packet_end = 0;
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <USART3_IRQHandler+0xf8>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
			 }
			 //else we do nothing this is probably an uncomplete packet containing r '!' databyte
			 packet_end = 0; //we wait  for the next '!' which maybe is delimiter if at the right position
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <USART3_IRQHandler+0xf8>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e000      	b.n	8001048 <USART3_IRQHandler+0xd0>
			 if(UART3_IT_buffer[0] == '#' && UART3_IT_buffer[UPLOAD_FRAME_SIZE-1] == '!') // if # is at begining and ! precisely at the index 6 --> its a flash packet !
 8001046:	bf00      	nop
		 }
	 }

	 if(UART3_byte_counter > UPLOAD_FRAME_SIZE)
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <USART3_IRQHandler+0xf0>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001050:	d902      	bls.n	8001058 <USART3_IRQHandler+0xe0>
	 {
		 UART3_byte_counter=0;
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <USART3_IRQHandler+0xf0>)
 8001054:	2200      	movs	r2, #0
 8001056:	801a      	strh	r2, [r3, #0]
	 }



  /* USER CODE END USART3_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000084 	.word	0x20000084
 8001064:	20000030 	.word	0x20000030
 8001068:	2000002e 	.word	0x2000002e
 800106c:	2000010c 	.word	0x2000010c
 8001070:	20000031 	.word	0x20000031
 8001074:	20000034 	.word	0x20000034
 8001078:	2000002c 	.word	0x2000002c

0800107c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <set_Led_color>:
uint32_t DMA_Double_buff[((LED_BITS)*2)]; // 2leds = 48 bits = 48 duty_cycle



void set_Led_color(uint8_t index,uint8_t  R, uint8_t G, uint8_t B)
{
 8001088:	b490      	push	{r4, r7}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4604      	mov	r4, r0
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4623      	mov	r3, r4
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	4603      	mov	r3, r0
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	460b      	mov	r3, r1
 80010a0:	717b      	strb	r3, [r7, #5]
 80010a2:	4613      	mov	r3, r2
 80010a4:	713b      	strb	r3, [r7, #4]
	led_strip[index].color[1] = R;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <set_Led_color+0x4c>)
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	79ba      	ldrb	r2, [r7, #6]
 80010b0:	705a      	strb	r2, [r3, #1]
	led_strip[index].color[0] = G;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <set_Led_color+0x4c>)
 80010b6:	797a      	ldrb	r2, [r7, #5]
 80010b8:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	led_strip[index].color[2] = B;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <set_Led_color+0x4c>)
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	793a      	ldrb	r2, [r7, #4]
 80010c6:	709a      	strb	r2, [r3, #2]

}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc90      	pop	{r4, r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000210 	.word	0x20000210

080010d8 <set_All_Leds_color>:


void set_All_Leds_color(uint8_t  R, uint8_t G, uint8_t B)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	460b      	mov	r3, r1
 80010e4:	71bb      	strb	r3, [r7, #6]
 80010e6:	4613      	mov	r3, r2
 80010e8:	717b      	strb	r3, [r7, #5]
	for(int i =0;i<NUM_LEDS;i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e013      	b.n	8001118 <set_All_Leds_color+0x40>
	{
		led_strip[i].color[1] = R;
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <set_All_Leds_color+0x50>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	705a      	strb	r2, [r3, #1]
		led_strip[i].color[0] = G;
 80010fc:	490a      	ldr	r1, [pc, #40]	; (8001128 <set_All_Leds_color+0x50>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	79ba      	ldrb	r2, [r7, #6]
 8001102:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		led_strip[i].color[2] = B;
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <set_All_Leds_color+0x50>)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	797a      	ldrb	r2, [r7, #5]
 8001110:	709a      	strb	r2, [r3, #2]
	for(int i =0;i<NUM_LEDS;i++)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b02      	cmp	r3, #2
 800111c:	dde8      	ble.n	80010f0 <set_All_Leds_color+0x18>
	}

}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000210 	.word	0x20000210

0800112c <led_set_duty>:
{
	return led_strip[index].data ;
}

void led_set_duty(uint8_t Dma_buff_pos,uint32_t led_state)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
	int i = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
	int DMA_buff_idx = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
	if(Dma_buff_pos == 0) // on place sur la premiere moitié du buffer
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d122      	bne.n	800118c <led_set_duty+0x60>
	{
		for( i =23;i>=0;i--)
 8001146:	2317      	movs	r3, #23
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e01b      	b.n	8001184 <led_set_duty+0x58>
		{
			if(READBIT(((led_state)),i)  ==  1) // si le bit est a 1
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <led_set_duty+0x42>
			{
				DMA_Double_buff[DMA_buff_idx] = ONE;
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <led_set_duty+0xb4>)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	210e      	movs	r1, #14
 8001162:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DMA_buff_idx++;
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	e007      	b.n	800117e <led_set_duty+0x52>
			}
			else // si a 0
			{
				DMA_Double_buff[DMA_buff_idx] = ZERO;
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <led_set_duty+0xb4>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2107      	movs	r1, #7
 8001174:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DMA_buff_idx++;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3301      	adds	r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
		for( i =23;i>=0;i--)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3b01      	subs	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dae0      	bge.n	800114c <led_set_duty+0x20>
				DMA_buff_idx++;
			}
		}
	}

}
 800118a:	e023      	b.n	80011d4 <led_set_duty+0xa8>
		for( i =23;i>=0;i--)
 800118c:	2317      	movs	r3, #23
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	e01d      	b.n	80011ce <led_set_duty+0xa2>
			if(READBIT(((led_state)),i)  ==  1) // si le bit est a 1
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <led_set_duty+0x8a>
				DMA_Double_buff[LED_BITS+DMA_buff_idx] = ONE;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3318      	adds	r3, #24
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <led_set_duty+0xb4>)
 80011a8:	210e      	movs	r1, #14
 80011aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DMA_buff_idx++;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3301      	adds	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	e008      	b.n	80011c8 <led_set_duty+0x9c>
				DMA_Double_buff[LED_BITS+DMA_buff_idx] = ZERO;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3318      	adds	r3, #24
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <led_set_duty+0xb4>)
 80011bc:	2107      	movs	r1, #7
 80011be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DMA_buff_idx++;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
		for( i =23;i>=0;i--)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dade      	bge.n	8001192 <led_set_duty+0x66>
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000021c 	.word	0x2000021c

080011e4 <led_set_reset_pulse>:


void led_set_reset_pulse(uint8_t Dma_buff_pos)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]


	int i = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
	int DMA_buff_idx = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
	if(Dma_buff_pos == 0) // on place sur la premiere moitié du buffer
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d111      	bne.n	8001220 <led_set_reset_pulse+0x3c>
	{
		for( i =23;i>=0;i--)
 80011fc:	2317      	movs	r3, #23
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e00a      	b.n	8001218 <led_set_reset_pulse+0x34>
		{

			DMA_Double_buff[DMA_buff_idx] = 0;
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <led_set_reset_pulse+0x6c>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2100      	movs	r1, #0
 8001208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			DMA_buff_idx++;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
		for( i =23;i>=0;i--)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3b01      	subs	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	daf1      	bge.n	8001202 <led_set_reset_pulse+0x1e>
				DMA_buff_idx++;

		}
	}

}
 800121e:	e011      	b.n	8001244 <led_set_reset_pulse+0x60>
		for( i =23;i>=0;i--)
 8001220:	2317      	movs	r3, #23
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e00b      	b.n	800123e <led_set_reset_pulse+0x5a>
				DMA_Double_buff[LED_BITS+DMA_buff_idx] = 0;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3318      	adds	r3, #24
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <led_set_reset_pulse+0x6c>)
 800122c:	2100      	movs	r1, #0
 800122e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DMA_buff_idx++;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3301      	adds	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
		for( i =23;i>=0;i--)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3b01      	subs	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	daf0      	bge.n	8001226 <led_set_reset_pulse+0x42>
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2000021c 	.word	0x2000021c

08001254 <led_update>:


void led_update(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

	reset_pulse = 0;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <led_update+0x3c>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR1 = 0; //reset duty cycle
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <led_update+0x40>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
	led_number = 0;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <led_update+0x44>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
	//chargement d'un temps a l'etat bas ( reset pulse ) puis de la premiere led
	led_set_reset_pulse(0);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ffb9 	bl	80011e4 <led_set_reset_pulse>
	led_set_reset_pulse(1);
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ffb6 	bl	80011e4 <led_set_reset_pulse>


	//start DMA tranfer

	 while (HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, DMA_Double_buff,48) != HAL_OK)
 8001278:	bf00      	nop
 800127a:	2330      	movs	r3, #48	; 0x30
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <led_update+0x48>)
 800127e:	2100      	movs	r1, #0
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <led_update+0x40>)
 8001282:	f001 fedb 	bl	800303c <HAL_TIM_PWM_Start_DMA>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f6      	bne.n	800127a <led_update+0x26>

	 }



}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000033 	.word	0x20000033
 8001294:	200000c4 	.word	0x200000c4
 8001298:	20000032 	.word	0x20000032
 800129c:	2000021c 	.word	0x2000021c

080012a0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) // this interupt callack  override ST HAL weak function
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	if(reset_pulse == 1)
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d107      	bne.n	80012c0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	{
		 while (HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1) != HAL_OK)
 80012b0:	bf00      	nop
 80012b2:	2100      	movs	r1, #0
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f002 f85b 	bl	8003370 <HAL_TIM_PWM_Stop_DMA>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f8      	bne.n	80012b2 <HAL_TIM_PWM_PulseFinishedCallback+0x12>
		 }

	}


	if(led_number >= NUM_LEDS) // si c'est la derniere led qui vient d'tre envoyé alors on recrit un reset pulse (des 0)
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d906      	bls.n	80012d6 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
	{
		reset_pulse = 1;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
		led_set_reset_pulse(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff ff88 	bl	80011e4 <led_set_reset_pulse>
	}




}
 80012d4:	e00f      	b.n	80012f6 <HAL_TIM_PWM_PulseFinishedCallback+0x56>
		led_set_duty(1,led_strip[led_number].data);
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80012de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e2:	4619      	mov	r1, r3
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff ff21 	bl	800112c <led_set_duty>
		led_number++;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80012f4:	701a      	strb	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000033 	.word	0x20000033
 8001304:	20000032 	.word	0x20000032
 8001308:	20000210 	.word	0x20000210

0800130c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)  // this interupt callack  override ST HAL weak function
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if(reset_pulse == 1)
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d107      	bne.n	800132c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>
		{
			 while (HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1) != HAL_OK)
 800131c:	bf00      	nop
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f002 f825 	bl	8003370 <HAL_TIM_PWM_Stop_DMA>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f8      	bne.n	800131e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x12>
			 }

		}


		if(led_number >= NUM_LEDS) // si c'est la derniere led qui vient d'tre envoyé alors on recrit un reset pulse (des 0)
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x64>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d906      	bls.n	8001342 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x36>
		{
			reset_pulse = 1;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x60>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
			led_set_reset_pulse(0);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff52 	bl	80011e4 <led_set_reset_pulse>
			led_number++;
		}



}
 8001340:	e00f      	b.n	8001362 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x56>
			led_set_duty(0,led_strip[led_number].data);
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x64>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>)
 800134a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134e:	4619      	mov	r1, r3
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff feeb 	bl	800112c <led_set_duty>
			led_number++;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x64>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x64>)
 8001360:	701a      	strb	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000033 	.word	0x20000033
 8001370:	20000032 	.word	0x20000032
 8001374:	20000210 	.word	0x20000210

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001378:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800137a:	e003      	b.n	8001384 <LoopCopyDataInit>

0800137c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800137e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001380:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001382:	3104      	adds	r1, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001388:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800138c:	d3f6      	bcc.n	800137c <CopyDataInit>
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001390:	e002      	b.n	8001398 <LoopFillZerobss>

08001392 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001394:	f842 3b04 	str.w	r3, [r2], #4

08001398 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800139a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800139c:	d3f9      	bcc.n	8001392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139e:	f7ff fe6d 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f002 ff7b 	bl	800429c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fa63 	bl	8000870 <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r3, =_sidata
 80013ac:	0800444c 	.word	0x0800444c
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80013b8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80013bc:	20000300 	.word	0x20000300

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f985 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f826 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fc52 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_DeInit+0x2c>)
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295
 80013fa:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_DeInit+0x2c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_DeInit+0x2c>)
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_DeInit+0x2c>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001410:	f000 f806 	bl	8001420 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f98d 	bl	800176a <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f947 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	20000008 	.word	0x20000008
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x1c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x20>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a03      	ldr	r2, [pc, #12]	; (80014ac <HAL_IncTick+0x20>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000008 	.word	0x20000008
 80014ac:	200002dc 	.word	0x200002dc

080014b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_GetTick+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	200002dc 	.word	0x200002dc

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff fff0 	bl	80014b0 <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_Delay+0x40>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ea:	bf00      	nop
 80014ec:	f7ff ffe0 	bl	80014b0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
  {
  }
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000008 	.word	0x20000008

08001508 <__NVIC_SetPriorityGrouping>:
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4906      	ldr	r1, [pc, #24]	; (80015a0 <__NVIC_EnableIRQ+0x34>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_DisableIRQ>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db10      	blt.n	80015d8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4909      	ldr	r1, [pc, #36]	; (80015e4 <__NVIC_DisableIRQ+0x40>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	3320      	adds	r3, #32
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80015d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff0b 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff20 	bl	8001550 <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff13 	bl	800156c <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff21 	bl	80015a4 <__NVIC_DisableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff94 	bl	80016a0 <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e043      	b.n	8001822 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_DMA_Init+0xa8>)
 80017a2:	4413      	add	r3, r2
 80017a4:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_DMA_Init+0xac>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	009a      	lsls	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a1f      	ldr	r2, [pc, #124]	; (8001834 <HAL_DMA_Init+0xb0>)
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	bffdfff8 	.word	0xbffdfff8
 8001830:	cccccccd 	.word	0xcccccccd
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e046      	b.n	80018d8 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_DMA_DeInit+0xac>)
 8001882:	4413      	add	r3, r2
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <HAL_DMA_DeInit+0xb0>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	009a      	lsls	r2, r3, #2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a15      	ldr	r2, [pc, #84]	; (80018ec <HAL_DMA_DeInit+0xb4>)
 8001896:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	bffdfff8 	.word	0xbffdfff8
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	40020000 	.word	0x40020000

080018f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_DMA_Start_IT+0x20>
 800190c:	2302      	movs	r3, #2
 800190e:	e04a      	b.n	80019a6 <HAL_DMA_Start_IT+0xb6>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800191e:	2b01      	cmp	r3, #1
 8001920:	d13a      	bne.n	8001998 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f9ae 	bl	8001ca8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 020e 	orr.w	r2, r2, #14
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e00f      	b.n	8001986 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0204 	bic.w	r2, r2, #4
 8001974:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 020a 	orr.w	r2, r2, #10
 8001984:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e005      	b.n	80019a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
 80019a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d005      	beq.n	80019d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2204      	movs	r2, #4
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e051      	b.n	8001a76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 020e 	bic.w	r2, r2, #14
 80019e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_DMA_Abort_IT+0xd0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d029      	beq.n	8001a50 <HAL_DMA_Abort_IT+0xa0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <HAL_DMA_Abort_IT+0xd4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d022      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x9c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <HAL_DMA_Abort_IT+0xd8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d01a      	beq.n	8001a46 <HAL_DMA_Abort_IT+0x96>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <HAL_DMA_Abort_IT+0xdc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d012      	beq.n	8001a40 <HAL_DMA_Abort_IT+0x90>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <HAL_DMA_Abort_IT+0xe0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00a      	beq.n	8001a3a <HAL_DMA_Abort_IT+0x8a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_DMA_Abort_IT+0xe4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d102      	bne.n	8001a34 <HAL_DMA_Abort_IT+0x84>
 8001a2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a32:	e00e      	b.n	8001a52 <HAL_DMA_Abort_IT+0xa2>
 8001a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a38:	e00b      	b.n	8001a52 <HAL_DMA_Abort_IT+0xa2>
 8001a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a3e:	e008      	b.n	8001a52 <HAL_DMA_Abort_IT+0xa2>
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	e005      	b.n	8001a52 <HAL_DMA_Abort_IT+0xa2>
 8001a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4a:	e002      	b.n	8001a52 <HAL_DMA_Abort_IT+0xa2>
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	e000      	b.n	8001a52 <HAL_DMA_Abort_IT+0xa2>
 8001a50:	2301      	movs	r3, #1
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_DMA_Abort_IT+0xe8>)
 8001a54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
    } 
  }
  return status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40020008 	.word	0x40020008
 8001a84:	4002001c 	.word	0x4002001c
 8001a88:	40020030 	.word	0x40020030
 8001a8c:	40020044 	.word	0x40020044
 8001a90:	40020058 	.word	0x40020058
 8001a94:	4002006c 	.word	0x4002006c
 8001a98:	40020000 	.word	0x40020000

08001a9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	2204      	movs	r2, #4
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d04f      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xc8>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d04a      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d107      	bne.n	8001aec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0204 	bic.w	r2, r2, #4
 8001aea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a66      	ldr	r2, [pc, #408]	; (8001c8c <HAL_DMA_IRQHandler+0x1f0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d029      	beq.n	8001b4a <HAL_DMA_IRQHandler+0xae>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_DMA_IRQHandler+0x1f4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d022      	beq.n	8001b46 <HAL_DMA_IRQHandler+0xaa>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a63      	ldr	r2, [pc, #396]	; (8001c94 <HAL_DMA_IRQHandler+0x1f8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01a      	beq.n	8001b40 <HAL_DMA_IRQHandler+0xa4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a62      	ldr	r2, [pc, #392]	; (8001c98 <HAL_DMA_IRQHandler+0x1fc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d012      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x9e>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a60      	ldr	r2, [pc, #384]	; (8001c9c <HAL_DMA_IRQHandler+0x200>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00a      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x98>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5f      	ldr	r2, [pc, #380]	; (8001ca0 <HAL_DMA_IRQHandler+0x204>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d102      	bne.n	8001b2e <HAL_DMA_IRQHandler+0x92>
 8001b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2c:	e00e      	b.n	8001b4c <HAL_DMA_IRQHandler+0xb0>
 8001b2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b32:	e00b      	b.n	8001b4c <HAL_DMA_IRQHandler+0xb0>
 8001b34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b38:	e008      	b.n	8001b4c <HAL_DMA_IRQHandler+0xb0>
 8001b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b3e:	e005      	b.n	8001b4c <HAL_DMA_IRQHandler+0xb0>
 8001b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b44:	e002      	b.n	8001b4c <HAL_DMA_IRQHandler+0xb0>
 8001b46:	2340      	movs	r3, #64	; 0x40
 8001b48:	e000      	b.n	8001b4c <HAL_DMA_IRQHandler+0xb0>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	4a55      	ldr	r2, [pc, #340]	; (8001ca4 <HAL_DMA_IRQHandler+0x208>)
 8001b4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8094 	beq.w	8001c82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b62:	e08e      	b.n	8001c82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2202      	movs	r2, #2
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d056      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x186>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d051      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 020a 	bic.w	r2, r2, #10
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a38      	ldr	r2, [pc, #224]	; (8001c8c <HAL_DMA_IRQHandler+0x1f0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d029      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x166>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a37      	ldr	r2, [pc, #220]	; (8001c90 <HAL_DMA_IRQHandler+0x1f4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d022      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x162>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a35      	ldr	r2, [pc, #212]	; (8001c94 <HAL_DMA_IRQHandler+0x1f8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01a      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x15c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a34      	ldr	r2, [pc, #208]	; (8001c98 <HAL_DMA_IRQHandler+0x1fc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d012      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x156>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a32      	ldr	r2, [pc, #200]	; (8001c9c <HAL_DMA_IRQHandler+0x200>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00a      	beq.n	8001bec <HAL_DMA_IRQHandler+0x150>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a31      	ldr	r2, [pc, #196]	; (8001ca0 <HAL_DMA_IRQHandler+0x204>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <HAL_DMA_IRQHandler+0x14a>
 8001be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001be4:	e00e      	b.n	8001c04 <HAL_DMA_IRQHandler+0x168>
 8001be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bea:	e00b      	b.n	8001c04 <HAL_DMA_IRQHandler+0x168>
 8001bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf0:	e008      	b.n	8001c04 <HAL_DMA_IRQHandler+0x168>
 8001bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf6:	e005      	b.n	8001c04 <HAL_DMA_IRQHandler+0x168>
 8001bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfc:	e002      	b.n	8001c04 <HAL_DMA_IRQHandler+0x168>
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e000      	b.n	8001c04 <HAL_DMA_IRQHandler+0x168>
 8001c02:	2302      	movs	r3, #2
 8001c04:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <HAL_DMA_IRQHandler+0x208>)
 8001c06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d034      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c20:	e02f      	b.n	8001c82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2208      	movs	r2, #8
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d028      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x1e8>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d023      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 020e 	bic.w	r2, r2, #14
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
    }
  }
  return;
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
}
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020008 	.word	0x40020008
 8001c90:	4002001c 	.word	0x4002001c
 8001c94:	40020030 	.word	0x40020030
 8001c98:	40020044 	.word	0x40020044
 8001c9c:	40020058 	.word	0x40020058
 8001ca0:	4002006c 	.word	0x4002006c
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d108      	bne.n	8001ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ce6:	e007      	b.n	8001cf8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	60da      	str	r2, [r3, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <HAL_FLASH_Program+0xd8>)
 8001d20:	7e1b      	ldrb	r3, [r3, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_FLASH_Program+0x26>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e054      	b.n	8001dd4 <HAL_FLASH_Program+0xd0>
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_FLASH_Program+0xd8>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d34:	f000 f8d4 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d144      	bne.n	8001dcc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	757b      	strb	r3, [r7, #21]
 8001d4c:	e007      	b.n	8001d5e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d102      	bne.n	8001d5a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001d54:	2302      	movs	r3, #2
 8001d56:	757b      	strb	r3, [r7, #21]
 8001d58:	e001      	b.n	8001d5e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75bb      	strb	r3, [r7, #22]
 8001d62:	e02d      	b.n	8001dc0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001d64:	7dbb      	ldrb	r3, [r7, #22]
 8001d66:	005a      	lsls	r2, r3, #1
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	eb02 0c03 	add.w	ip, r2, r3
 8001d6e:	7dbb      	ldrb	r3, [r7, #22]
 8001d70:	0119      	lsls	r1, r3, #4
 8001d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d76:	f1c1 0620 	rsb	r6, r1, #32
 8001d7a:	f1a1 0020 	sub.w	r0, r1, #32
 8001d7e:	fa22 f401 	lsr.w	r4, r2, r1
 8001d82:	fa03 f606 	lsl.w	r6, r3, r6
 8001d86:	4334      	orrs	r4, r6
 8001d88:	fa23 f000 	lsr.w	r0, r3, r0
 8001d8c:	4304      	orrs	r4, r0
 8001d8e:	fa23 f501 	lsr.w	r5, r3, r1
 8001d92:	b2a3      	uxth	r3, r4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4660      	mov	r0, ip
 8001d98:	f000 f886 	bl	8001ea8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001da0:	f000 f89e 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8001da4:	4603      	mov	r3, r0
 8001da6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_FLASH_Program+0xdc>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <HAL_FLASH_Program+0xdc>)
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d107      	bne.n	8001dca <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001dba:	7dbb      	ldrb	r3, [r7, #22]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	75bb      	strb	r3, [r7, #22]
 8001dc0:	7dba      	ldrb	r2, [r7, #22]
 8001dc2:	7d7b      	ldrb	r3, [r7, #21]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3cd      	bcc.n	8001d64 <HAL_FLASH_Program+0x60>
 8001dc8:	e000      	b.n	8001dcc <HAL_FLASH_Program+0xc8>
      {
        break;
 8001dca:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_FLASH_Program+0xd8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	761a      	strb	r2, [r3, #24]

  return status;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ddc:	200002e0 	.word	0x200002e0
 8001de0:	40022000 	.word	0x40022000

08001de4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_FLASH_Unlock+0x40>)
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_FLASH_Unlock+0x40>)
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_FLASH_Unlock+0x44>)
 8001dfe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_FLASH_Unlock+0x40>)
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_FLASH_Unlock+0x48>)
 8001e04:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_FLASH_Unlock+0x40>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001e16:	79fb      	ldrb	r3, [r7, #7]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000
 8001e28:	45670123 	.word	0x45670123
 8001e2c:	cdef89ab 	.word	0xcdef89ab

08001e30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_FLASH_Lock+0x1c>)
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_FLASH_Lock+0x1c>)
 8001e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e3e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40022000 	.word	0x40022000

08001e50 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_FLASH_OB_Unlock+0x2c>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_FLASH_OB_Unlock+0x2c>)
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_FLASH_OB_Unlock+0x30>)
 8001e64:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_FLASH_OB_Unlock+0x2c>)
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_FLASH_OB_Unlock+0x34>)
 8001e6a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e000      	b.n	8001e72 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	45670123 	.word	0x45670123
 8001e84:	cdef89ab 	.word	0xcdef89ab

08001e88 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_FLASH_OB_Lock+0x1c>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_FLASH_OB_Lock+0x1c>)
 8001e92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e96:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <FLASH_Program_HalfWord+0x30>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <FLASH_Program_HalfWord+0x34>)
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <FLASH_Program_HalfWord+0x34>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	887a      	ldrh	r2, [r7, #2]
 8001eca:	801a      	strh	r2, [r3, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200002e0 	.word	0x200002e0
 8001edc:	40022000 	.word	0x40022000

08001ee0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff fae2 	bl	80014b0 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001eee:	e010      	b.n	8001f12 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d00c      	beq.n	8001f12 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <FLASH_WaitForLastOperation+0x2e>
 8001efe:	f7ff fad7 	bl	80014b0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d201      	bcs.n	8001f12 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e025      	b.n	8001f5e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <FLASH_WaitForLastOperation+0x88>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1e8      	bne.n	8001ef0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <FLASH_WaitForLastOperation+0x88>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <FLASH_WaitForLastOperation+0x88>)
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <FLASH_WaitForLastOperation+0x88>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <FLASH_WaitForLastOperation+0x88>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <FLASH_WaitForLastOperation+0x88>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f54:	f000 f80a 	bl	8001f6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000

08001f6c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <FLASH_SetErrorCode+0x98>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <FLASH_SetErrorCode+0x9c>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <FLASH_SetErrorCode+0x9c>)
 8001f8c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f043 0310 	orr.w	r3, r3, #16
 8001f94:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <FLASH_SetErrorCode+0x98>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <FLASH_SetErrorCode+0x9c>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <FLASH_SetErrorCode+0x9c>)
 8001fac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <FLASH_SetErrorCode+0x98>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <FLASH_SetErrorCode+0x9c>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <FLASH_SetErrorCode+0x9c>)
 8001fcc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <FLASH_SetErrorCode+0x98>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <FLASH_SetErrorCode+0x98>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f240 1201 	movw	r2, #257	; 0x101
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d106      	bne.n	8001ff2 <FLASH_SetErrorCode+0x86>
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <FLASH_SetErrorCode+0x98>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <FLASH_SetErrorCode+0x98>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	61d3      	str	r3, [r2, #28]
}  
 8001ff0:	e002      	b.n	8001ff8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <FLASH_SetErrorCode+0x98>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60d3      	str	r3, [r2, #12]
}  
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40022000 	.word	0x40022000
 8002008:	200002e0 	.word	0x200002e0

0800200c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_FLASHEx_Erase+0xd0>)
 8002020:	7e1b      	ldrb	r3, [r3, #24]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_FLASHEx_Erase+0x1e>
 8002026:	2302      	movs	r3, #2
 8002028:	e053      	b.n	80020d2 <HAL_FLASHEx_Erase+0xc6>
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_FLASHEx_Erase+0xd0>)
 800202c:	2201      	movs	r2, #1
 800202e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d116      	bne.n	8002066 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002038:	f24c 3050 	movw	r0, #50000	; 0xc350
 800203c:	f7ff ff50 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d141      	bne.n	80020ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002046:	2001      	movs	r0, #1
 8002048:	f000 f84c 	bl	80020e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800204c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002050:	f7ff ff46 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_FLASHEx_Erase+0xd4>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <HAL_FLASHEx_Erase+0xd4>)
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	6113      	str	r3, [r2, #16]
 8002064:	e031      	b.n	80020ca <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002066:	f24c 3050 	movw	r0, #50000	; 0xc350
 800206a:	f7ff ff39 	bl	8001ee0 <FLASH_WaitForLastOperation>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12a      	bne.n	80020ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f04f 32ff 	mov.w	r2, #4294967295
 800207a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	e019      	b.n	80020b8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002084:	68b8      	ldr	r0, [r7, #8]
 8002086:	f000 f849 	bl	800211c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800208a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800208e:	f7ff ff27 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8002092:	4603      	mov	r3, r0
 8002094:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_FLASHEx_Erase+0xd4>)
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_FLASHEx_Erase+0xd4>)
 800209c:	f023 0302 	bic.w	r3, r3, #2
 80020a0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	601a      	str	r2, [r3, #0]
            break;
 80020ae:	e00c      	b.n	80020ca <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020b6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	029a      	lsls	r2, r3, #10
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3dc      	bcc.n	8002084 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_FLASHEx_Erase+0xd0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	761a      	strb	r2, [r3, #24]

  return status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200002e0 	.word	0x200002e0
 80020e0:	40022000 	.word	0x40022000

080020e4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <FLASH_MassErase+0x30>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <FLASH_MassErase+0x34>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <FLASH_MassErase+0x34>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <FLASH_MassErase+0x34>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <FLASH_MassErase+0x34>)
 8002104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002108:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	200002e0 	.word	0x200002e0
 8002118:	40022000 	.word	0x40022000

0800211c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <FLASH_PageErase+0x38>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <FLASH_PageErase+0x3c>)
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <FLASH_PageErase+0x3c>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <FLASH_PageErase+0x3c>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <FLASH_PageErase+0x3c>)
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	4a05      	ldr	r2, [pc, #20]	; (8002158 <FLASH_PageErase+0x3c>)
 8002142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002146:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	200002e0 	.word	0x200002e0
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b08b      	sub	sp, #44	; 0x2c
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	e127      	b.n	80023c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002170:	2201      	movs	r2, #1
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	429a      	cmp	r2, r3
 800218a:	f040 8116 	bne.w	80023ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b12      	cmp	r3, #18
 8002194:	d034      	beq.n	8002200 <HAL_GPIO_Init+0xa4>
 8002196:	2b12      	cmp	r3, #18
 8002198:	d80d      	bhi.n	80021b6 <HAL_GPIO_Init+0x5a>
 800219a:	2b02      	cmp	r3, #2
 800219c:	d02b      	beq.n	80021f6 <HAL_GPIO_Init+0x9a>
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d804      	bhi.n	80021ac <HAL_GPIO_Init+0x50>
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d031      	beq.n	800220a <HAL_GPIO_Init+0xae>
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d01c      	beq.n	80021e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021aa:	e048      	b.n	800223e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d043      	beq.n	8002238 <HAL_GPIO_Init+0xdc>
 80021b0:	2b11      	cmp	r3, #17
 80021b2:	d01b      	beq.n	80021ec <HAL_GPIO_Init+0x90>
          break;
 80021b4:	e043      	b.n	800223e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021b6:	4a89      	ldr	r2, [pc, #548]	; (80023dc <HAL_GPIO_Init+0x280>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d026      	beq.n	800220a <HAL_GPIO_Init+0xae>
 80021bc:	4a87      	ldr	r2, [pc, #540]	; (80023dc <HAL_GPIO_Init+0x280>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d806      	bhi.n	80021d0 <HAL_GPIO_Init+0x74>
 80021c2:	4a87      	ldr	r2, [pc, #540]	; (80023e0 <HAL_GPIO_Init+0x284>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d020      	beq.n	800220a <HAL_GPIO_Init+0xae>
 80021c8:	4a86      	ldr	r2, [pc, #536]	; (80023e4 <HAL_GPIO_Init+0x288>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01d      	beq.n	800220a <HAL_GPIO_Init+0xae>
          break;
 80021ce:	e036      	b.n	800223e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021d0:	4a85      	ldr	r2, [pc, #532]	; (80023e8 <HAL_GPIO_Init+0x28c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d019      	beq.n	800220a <HAL_GPIO_Init+0xae>
 80021d6:	4a85      	ldr	r2, [pc, #532]	; (80023ec <HAL_GPIO_Init+0x290>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d016      	beq.n	800220a <HAL_GPIO_Init+0xae>
 80021dc:	4a84      	ldr	r2, [pc, #528]	; (80023f0 <HAL_GPIO_Init+0x294>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0xae>
          break;
 80021e2:	e02c      	b.n	800223e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	623b      	str	r3, [r7, #32]
          break;
 80021ea:	e028      	b.n	800223e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	3304      	adds	r3, #4
 80021f2:	623b      	str	r3, [r7, #32]
          break;
 80021f4:	e023      	b.n	800223e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	3308      	adds	r3, #8
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e01e      	b.n	800223e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	330c      	adds	r3, #12
 8002206:	623b      	str	r3, [r7, #32]
          break;
 8002208:	e019      	b.n	800223e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002212:	2304      	movs	r3, #4
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e012      	b.n	800223e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002220:	2308      	movs	r3, #8
 8002222:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	611a      	str	r2, [r3, #16]
          break;
 800222a:	e008      	b.n	800223e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800222c:	2308      	movs	r3, #8
 800222e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	615a      	str	r2, [r3, #20]
          break;
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
          break;
 800223c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2bff      	cmp	r3, #255	; 0xff
 8002242:	d801      	bhi.n	8002248 <HAL_GPIO_Init+0xec>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	e001      	b.n	800224c <HAL_GPIO_Init+0xf0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3304      	adds	r3, #4
 800224c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2bff      	cmp	r3, #255	; 0xff
 8002252:	d802      	bhi.n	800225a <HAL_GPIO_Init+0xfe>
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x104>
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	3b08      	subs	r3, #8
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	210f      	movs	r1, #15
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	401a      	ands	r2, r3
 8002272:	6a39      	ldr	r1, [r7, #32]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	431a      	orrs	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8096 	beq.w	80023ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800228e:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_GPIO_Init+0x298>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_GPIO_Init+0x298>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6193      	str	r3, [r2, #24]
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_GPIO_Init+0x298>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022a6:	4a54      	ldr	r2, [pc, #336]	; (80023f8 <HAL_GPIO_Init+0x29c>)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4013      	ands	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_GPIO_Init+0x2a0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x19e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4a      	ldr	r2, [pc, #296]	; (8002400 <HAL_GPIO_Init+0x2a4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x19a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a49      	ldr	r2, [pc, #292]	; (8002404 <HAL_GPIO_Init+0x2a8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x196>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a48      	ldr	r2, [pc, #288]	; (8002408 <HAL_GPIO_Init+0x2ac>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x192>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x1a0>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_Init+0x1a0>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_Init+0x1a0>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x1a0>
 80022fa:	2300      	movs	r3, #0
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	f002 0203 	and.w	r2, r2, #3
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800230c:	493a      	ldr	r1, [pc, #232]	; (80023f8 <HAL_GPIO_Init+0x29c>)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_GPIO_Init+0x2b0>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4938      	ldr	r1, [pc, #224]	; (800240c <HAL_GPIO_Init+0x2b0>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
 8002332:	e006      	b.n	8002342 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_GPIO_Init+0x2b0>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	43db      	mvns	r3, r3
 800233c:	4933      	ldr	r1, [pc, #204]	; (800240c <HAL_GPIO_Init+0x2b0>)
 800233e:	4013      	ands	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_GPIO_Init+0x2b0>)
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	492e      	ldr	r1, [pc, #184]	; (800240c <HAL_GPIO_Init+0x2b0>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
 800235a:	e006      	b.n	800236a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_GPIO_Init+0x2b0>)
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	43db      	mvns	r3, r3
 8002364:	4929      	ldr	r1, [pc, #164]	; (800240c <HAL_GPIO_Init+0x2b0>)
 8002366:	4013      	ands	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_GPIO_Init+0x2b0>)
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	4924      	ldr	r1, [pc, #144]	; (800240c <HAL_GPIO_Init+0x2b0>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
 8002382:	e006      	b.n	8002392 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_GPIO_Init+0x2b0>)
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	43db      	mvns	r3, r3
 800238c:	491f      	ldr	r1, [pc, #124]	; (800240c <HAL_GPIO_Init+0x2b0>)
 800238e:	4013      	ands	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_GPIO_Init+0x2b0>)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	491a      	ldr	r1, [pc, #104]	; (800240c <HAL_GPIO_Init+0x2b0>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60cb      	str	r3, [r1, #12]
 80023aa:	e006      	b.n	80023ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_GPIO_Init+0x2b0>)
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	4915      	ldr	r1, [pc, #84]	; (800240c <HAL_GPIO_Init+0x2b0>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f aed0 	bne.w	8002170 <HAL_GPIO_Init+0x14>
  }
}
 80023d0:	bf00      	nop
 80023d2:	372c      	adds	r7, #44	; 0x2c
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	10210000 	.word	0x10210000
 80023e0:	10110000 	.word	0x10110000
 80023e4:	10120000 	.word	0x10120000
 80023e8:	10310000 	.word	0x10310000
 80023ec:	10320000 	.word	0x10320000
 80023f0:	10220000 	.word	0x10220000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40010800 	.word	0x40010800
 8002400:	40010c00 	.word	0x40010c00
 8002404:	40011000 	.word	0x40011000
 8002408:	40011400 	.word	0x40011400
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800241e:	e09a      	b.n	8002556 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 808d 	beq.w	8002550 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002436:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_GPIO_DeInit+0x160>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4013      	ands	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a46      	ldr	r2, [pc, #280]	; (8002574 <HAL_GPIO_DeInit+0x164>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <HAL_GPIO_DeInit+0x78>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a45      	ldr	r2, [pc, #276]	; (8002578 <HAL_GPIO_DeInit+0x168>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00d      	beq.n	8002484 <HAL_GPIO_DeInit+0x74>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a44      	ldr	r2, [pc, #272]	; (800257c <HAL_GPIO_DeInit+0x16c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <HAL_GPIO_DeInit+0x70>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a43      	ldr	r2, [pc, #268]	; (8002580 <HAL_GPIO_DeInit+0x170>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_GPIO_DeInit+0x6c>
 8002478:	2303      	movs	r3, #3
 800247a:	e006      	b.n	800248a <HAL_GPIO_DeInit+0x7a>
 800247c:	2304      	movs	r3, #4
 800247e:	e004      	b.n	800248a <HAL_GPIO_DeInit+0x7a>
 8002480:	2302      	movs	r3, #2
 8002482:	e002      	b.n	800248a <HAL_GPIO_DeInit+0x7a>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_GPIO_DeInit+0x7a>
 8002488:	2300      	movs	r3, #0
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	f002 0203 	and.w	r2, r2, #3
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	4093      	lsls	r3, r2
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	429a      	cmp	r2, r3
 8002498:	d132      	bne.n	8002500 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80024aa:	4a31      	ldr	r2, [pc, #196]	; (8002570 <HAL_GPIO_DeInit+0x160>)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	482d      	ldr	r0, [pc, #180]	; (8002570 <HAL_GPIO_DeInit+0x160>)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	400a      	ands	r2, r1
 80024c2:	3302      	adds	r3, #2
 80024c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_GPIO_DeInit+0x174>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	492c      	ldr	r1, [pc, #176]	; (8002584 <HAL_GPIO_DeInit+0x174>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_GPIO_DeInit+0x174>)
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	43db      	mvns	r3, r3
 80024de:	4929      	ldr	r1, [pc, #164]	; (8002584 <HAL_GPIO_DeInit+0x174>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_GPIO_DeInit+0x174>)
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	4925      	ldr	r1, [pc, #148]	; (8002584 <HAL_GPIO_DeInit+0x174>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_GPIO_DeInit+0x174>)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4922      	ldr	r1, [pc, #136]	; (8002584 <HAL_GPIO_DeInit+0x174>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2bff      	cmp	r3, #255	; 0xff
 8002504:	d801      	bhi.n	800250a <HAL_GPIO_DeInit+0xfa>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	e001      	b.n	800250e <HAL_GPIO_DeInit+0xfe>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2bff      	cmp	r3, #255	; 0xff
 8002514:	d802      	bhi.n	800251c <HAL_GPIO_DeInit+0x10c>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	e002      	b.n	8002522 <HAL_GPIO_DeInit+0x112>
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3b08      	subs	r3, #8
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	210f      	movs	r1, #15
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	401a      	ands	r2, r3
 8002534:	2104      	movs	r1, #4
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	431a      	orrs	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	43db      	mvns	r3, r3
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	3301      	adds	r3, #1
 8002554:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	f47f af5e 	bne.w	8002420 <HAL_GPIO_DeInit+0x10>
  }
}
 8002564:	bf00      	nop
 8002566:	3724      	adds	r7, #36	; 0x24
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000
 8002574:	40010800 	.word	0x40010800
 8002578:	40010c00 	.word	0x40010c00
 800257c:	40011000 	.word	0x40011000
 8002580:	40011400 	.word	0x40011400
 8002584:	40010400 	.word	0x40010400

08002588 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800258e:	f7fe ff8f 	bl	80014b0 <HAL_GetTick>
 8002592:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002594:	4b45      	ldr	r3, [pc, #276]	; (80026ac <HAL_RCC_DeInit+0x124>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a44      	ldr	r2, [pc, #272]	; (80026ac <HAL_RCC_DeInit+0x124>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe ff85 	bl	80014b0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e077      	b.n	80026a4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80025b4:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCC_DeInit+0x124>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80025c0:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <HAL_RCC_DeInit+0x124>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025c8:	4a38      	ldr	r2, [pc, #224]	; (80026ac <HAL_RCC_DeInit+0x124>)
 80025ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80025d0:	f7fe ff6e 	bl	80014b0 <HAL_GetTick>
 80025d4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80025d6:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_DeInit+0x124>)
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025de:	f7fe ff67 	bl	80014b0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e057      	b.n	80026a4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80025f4:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_RCC_DeInit+0x124>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_DeInit+0x128>)
 8002602:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <HAL_RCC_DeInit+0x12c>)
 8002604:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002606:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <HAL_RCC_DeInit+0x130>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe ff0e 	bl	800142c <HAL_InitTick>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e044      	b.n	80026a4 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800261a:	f7fe ff49 	bl	80014b0 <HAL_GetTick>
 800261e:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <HAL_RCC_DeInit+0x124>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a21      	ldr	r2, [pc, #132]	; (80026ac <HAL_RCC_DeInit+0x124>)
 8002626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7fe ff3f 	bl	80014b0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e031      	b.n	80026a4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_RCC_DeInit+0x124>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_RCC_DeInit+0x124>)
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002652:	f7fe ff2d 	bl	80014b0 <HAL_GetTick>
 8002656:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_RCC_DeInit+0x124>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <HAL_RCC_DeInit+0x124>)
 800265e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002662:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002666:	f7fe ff23 	bl	80014b0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b64      	cmp	r3, #100	; 0x64
 8002672:	d901      	bls.n	8002678 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e015      	b.n	80026a4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_DeInit+0x124>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_DeInit+0x124>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_RCC_DeInit+0x124>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_DeInit+0x124>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	4a05      	ldr	r2, [pc, #20]	; (80026ac <HAL_RCC_DeInit+0x124>)
 8002696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCC_DeInit+0x124>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	20000000 	.word	0x20000000
 80026b4:	007a1200 	.word	0x007a1200
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e26c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8087 	beq.w	80027ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026dc:	4b92      	ldr	r3, [pc, #584]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d00c      	beq.n	8002702 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e8:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d112      	bne.n	800271a <HAL_RCC_OscConfig+0x5e>
 80026f4:	4b8c      	ldr	r3, [pc, #560]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d10b      	bne.n	800271a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002702:	4b89      	ldr	r3, [pc, #548]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d06c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x12c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d168      	bne.n	80027e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e246      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x76>
 8002724:	4b80      	ldr	r3, [pc, #512]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a7f      	ldr	r2, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e02e      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x98>
 800273a:	4b7b      	ldr	r3, [pc, #492]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7a      	ldr	r2, [pc, #488]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b78      	ldr	r3, [pc, #480]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a77      	ldr	r2, [pc, #476]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800274c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e01d      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0xbc>
 800275e:	4b72      	ldr	r3, [pc, #456]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a71      	ldr	r2, [pc, #452]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6e      	ldr	r2, [pc, #440]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 8002778:	4b6b      	ldr	r3, [pc, #428]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a6a      	ldr	r2, [pc, #424]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b68      	ldr	r3, [pc, #416]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a67      	ldr	r2, [pc, #412]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fe8a 	bl	80014b0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fe86 	bl	80014b0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1fa      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0xe4>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fe76 	bl	80014b0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe fe72 	bl	80014b0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1e6      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x10c>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d063      	beq.n	80028be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f6:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002802:	4b49      	ldr	r3, [pc, #292]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b08      	cmp	r3, #8
 800280c:	d11c      	bne.n	8002848 <HAL_RCC_OscConfig+0x18c>
 800280e:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d116      	bne.n	8002848 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x176>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e1ba      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4939      	ldr	r1, [pc, #228]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	e03a      	b.n	80028be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002850:	4b36      	ldr	r3, [pc, #216]	; (800292c <HAL_RCC_OscConfig+0x270>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fe2b 	bl	80014b0 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fe27 	bl	80014b0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e19b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4927      	ldr	r1, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
 8002890:	e015      	b.n	80028be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_RCC_OscConfig+0x270>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fe0a 	bl	80014b0 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a0:	f7fe fe06 	bl	80014b0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e17a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d03a      	beq.n	8002940 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d019      	beq.n	8002906 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_RCC_OscConfig+0x274>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d8:	f7fe fdea 	bl	80014b0 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe fde6 	bl	80014b0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e15a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028fe:	2001      	movs	r0, #1
 8002900:	f000 fada 	bl	8002eb8 <RCC_Delay>
 8002904:	e01c      	b.n	8002940 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_RCC_OscConfig+0x274>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290c:	f7fe fdd0 	bl	80014b0 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002912:	e00f      	b.n	8002934 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe fdcc 	bl	80014b0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d908      	bls.n	8002934 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e140      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	42420000 	.word	0x42420000
 8002930:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	4b9e      	ldr	r3, [pc, #632]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e9      	bne.n	8002914 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a6 	beq.w	8002a9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002952:	4b97      	ldr	r3, [pc, #604]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b94      	ldr	r3, [pc, #592]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4a93      	ldr	r2, [pc, #588]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002968:	61d3      	str	r3, [r2, #28]
 800296a:	4b91      	ldr	r3, [pc, #580]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b8e      	ldr	r3, [pc, #568]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d118      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002986:	4b8b      	ldr	r3, [pc, #556]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a8a      	ldr	r2, [pc, #552]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7fe fd8d 	bl	80014b0 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe fd89 	bl	80014b0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b64      	cmp	r3, #100	; 0x64
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0fd      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x312>
 80029c0:	4b7b      	ldr	r3, [pc, #492]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4a7a      	ldr	r2, [pc, #488]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6213      	str	r3, [r2, #32]
 80029cc:	e02d      	b.n	8002a2a <HAL_RCC_OscConfig+0x36e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x334>
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a75      	ldr	r2, [pc, #468]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6213      	str	r3, [r2, #32]
 80029e2:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a72      	ldr	r2, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	6213      	str	r3, [r2, #32]
 80029ee:	e01c      	b.n	8002a2a <HAL_RCC_OscConfig+0x36e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCC_OscConfig+0x356>
 80029f8:	4b6d      	ldr	r3, [pc, #436]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4a6c      	ldr	r2, [pc, #432]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	6213      	str	r3, [r2, #32]
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4a69      	ldr	r2, [pc, #420]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6213      	str	r3, [r2, #32]
 8002a10:	e00b      	b.n	8002a2a <HAL_RCC_OscConfig+0x36e>
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a66      	ldr	r2, [pc, #408]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	4b64      	ldr	r3, [pc, #400]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a63      	ldr	r2, [pc, #396]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d015      	beq.n	8002a5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fd3d 	bl	80014b0 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a38:	e00a      	b.n	8002a50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fd39 	bl	80014b0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e0ab      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ee      	beq.n	8002a3a <HAL_RCC_OscConfig+0x37e>
 8002a5c:	e014      	b.n	8002a88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fd27 	bl	80014b0 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe fd23 	bl	80014b0 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e095      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ee      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8e:	4b48      	ldr	r3, [pc, #288]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a47      	ldr	r2, [pc, #284]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8081 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d061      	beq.n	8002b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d146      	bne.n	8002b46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCC_OscConfig+0x4fc>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe fcf7 	bl	80014b0 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fcf3 	bl	80014b0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e067      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad8:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aec:	d108      	bne.n	8002b00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	492d      	ldr	r1, [pc, #180]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a19      	ldr	r1, [r3, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	430b      	orrs	r3, r1
 8002b12:	4927      	ldr	r1, [pc, #156]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_RCC_OscConfig+0x4fc>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fcc7 	bl	80014b0 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe fcc3 	bl	80014b0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e037      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x46a>
 8002b44:	e02f      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <HAL_RCC_OscConfig+0x4fc>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fcb0 	bl	80014b0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fcac 	bl	80014b0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e020      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x498>
 8002b72:	e018      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e013      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42420060 	.word	0x42420060

08002bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0d0      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d910      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4965      	ldr	r1, [pc, #404]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b8      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	494d      	ldr	r1, [pc, #308]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d040      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d115      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e073      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06b      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4936      	ldr	r1, [pc, #216]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fc00 	bl	80014b0 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fbfc 	bl	80014b0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e053      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d210      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 0207 	bic.w	r2, r3, #7
 8002cf2:	4922      	ldr	r1, [pc, #136]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e032      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4916      	ldr	r1, [pc, #88]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490e      	ldr	r1, [pc, #56]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4a:	f000 f821 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4601      	mov	r1, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1cc>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1d0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fb5e 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	0800442c 	.word	0x0800442c
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	20000004 	.word	0x20000004

08002d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	b490      	push	{r4, r7}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d96:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d98:	1d3c      	adds	r4, r7, #4
 8002d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dba:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x46>
 8002dce:	e02d      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd2:	623b      	str	r3, [r7, #32]
      break;
 8002dd4:	e02d      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	0c9b      	lsrs	r3, r3, #18
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002de2:	4413      	add	r3, r2
 8002de4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002de8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c5b      	lsrs	r3, r3, #17
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e02:	4413      	add	r3, r2
 8002e04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e0e:	fb02 f203 	mul.w	r2, r2, r3
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1a:	e004      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e20:	fb02 f303 	mul.w	r3, r2, r3
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	623b      	str	r3, [r7, #32]
      break;
 8002e2a:	e002      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e2e:	623b      	str	r3, [r7, #32]
      break;
 8002e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e32:	6a3b      	ldr	r3, [r7, #32]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3728      	adds	r7, #40	; 0x28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc90      	pop	{r4, r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	08004418 	.word	0x08004418
 8002e44:	08004428 	.word	0x08004428
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	007a1200 	.word	0x007a1200
 8002e50:	003d0900 	.word	0x003d0900

08002e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e6c:	f7ff fff2 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e70:	4601      	mov	r1, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4a03      	ldr	r2, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	0800443c 	.word	0x0800443c

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e94:	f7ff ffde 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e98:	4601      	mov	r1, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	0adb      	lsrs	r3, r3, #11
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	0800443c 	.word	0x0800443c

08002eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <RCC_Delay+0x34>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <RCC_Delay+0x38>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0a5b      	lsrs	r3, r3, #9
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ed4:	bf00      	nop
  }
  while (Delay --);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e5a      	subs	r2, r3, #1
 8002eda:	60fa      	str	r2, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f9      	bne.n	8002ed4 <RCC_Delay+0x1c>
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	10624dd3 	.word	0x10624dd3

08002ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e041      	b.n	8002f8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fee6 	bl	8000cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f000 fc72 	bl	800381c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a1a      	ldr	r2, [r3, #32]
 8002fa8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_TIM_PWM_DeInit+0x40>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1a      	ldr	r2, [r3, #32]
 8002fb8:	f240 4344 	movw	r3, #1092	; 0x444
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <HAL_TIM_PWM_DeInit+0x40>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd ff0a 	bl	8000dec <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <HAL_TIM_PWM_Start_DMA+0x28>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e022      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x6e>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d109      	bne.n	800307e <HAL_TIM_PWM_Start_DMA+0x42>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e015      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x6e>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d109      	bne.n	8003098 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e008      	b.n	80030aa <HAL_TIM_PWM_Start_DMA+0x6e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
 80030b0:	e14e      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start_DMA+0x90>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e022      	b.n	8003112 <HAL_TIM_PWM_Start_DMA+0xd6>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d109      	bne.n	80030e6 <HAL_TIM_PWM_Start_DMA+0xaa>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e015      	b.n	8003112 <HAL_TIM_PWM_Start_DMA+0xd6>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start_DMA+0xc4>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e008      	b.n	8003112 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d024      	beq.n	8003160 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <HAL_TIM_PWM_Start_DMA+0xea>
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e114      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d104      	bne.n	8003136 <HAL_TIM_PWM_Start_DMA+0xfa>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003134:	e016      	b.n	8003164 <HAL_TIM_PWM_Start_DMA+0x128>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b04      	cmp	r3, #4
 800313a:	d104      	bne.n	8003146 <HAL_TIM_PWM_Start_DMA+0x10a>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003144:	e00e      	b.n	8003164 <HAL_TIM_PWM_Start_DMA+0x128>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Start_DMA+0x11a>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003154:	e006      	b.n	8003164 <HAL_TIM_PWM_Start_DMA+0x128>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2202      	movs	r2, #2
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800315e:	e001      	b.n	8003164 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0f5      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	f200 80ae 	bhi.w	80032c8 <HAL_TIM_PWM_Start_DMA+0x28c>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_TIM_PWM_Start_DMA+0x138>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080032c9 	.word	0x080032c9
 800317c:	080032c9 	.word	0x080032c9
 8003180:	080032c9 	.word	0x080032c9
 8003184:	080031f1 	.word	0x080031f1
 8003188:	080032c9 	.word	0x080032c9
 800318c:	080032c9 	.word	0x080032c9
 8003190:	080032c9 	.word	0x080032c9
 8003194:	08003239 	.word	0x08003239
 8003198:	080032c9 	.word	0x080032c9
 800319c:	080032c9 	.word	0x080032c9
 80031a0:	080032c9 	.word	0x080032c9
 80031a4:	08003281 	.word	0x08003281
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	4a6a      	ldr	r2, [pc, #424]	; (8003358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	4a69      	ldr	r2, [pc, #420]	; (800335c <HAL_TIM_PWM_Start_DMA+0x320>)
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	4a68      	ldr	r2, [pc, #416]	; (8003360 <HAL_TIM_PWM_Start_DMA+0x324>)
 80031be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3334      	adds	r3, #52	; 0x34
 80031cc:	461a      	mov	r2, r3
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	f7fe fb8e 	bl	80018f0 <HAL_DMA_Start_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_TIM_PWM_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0b8      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ec:	60da      	str	r2, [r3, #12]
      break;
 80031ee:	e06c      	b.n	80032ca <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	4a58      	ldr	r2, [pc, #352]	; (8003358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	4a57      	ldr	r2, [pc, #348]	; (800335c <HAL_TIM_PWM_Start_DMA+0x320>)
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	4a56      	ldr	r2, [pc, #344]	; (8003360 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3338      	adds	r3, #56	; 0x38
 8003214:	461a      	mov	r2, r3
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	f7fe fb6a 	bl	80018f0 <HAL_DMA_Start_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_TIM_PWM_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e094      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003234:	60da      	str	r2, [r3, #12]
      break;
 8003236:	e048      	b.n	80032ca <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4a46      	ldr	r2, [pc, #280]	; (8003358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800323e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	4a45      	ldr	r2, [pc, #276]	; (800335c <HAL_TIM_PWM_Start_DMA+0x320>)
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4a44      	ldr	r2, [pc, #272]	; (8003360 <HAL_TIM_PWM_Start_DMA+0x324>)
 800324e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	333c      	adds	r3, #60	; 0x3c
 800325c:	461a      	mov	r2, r3
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	f7fe fb46 	bl	80018f0 <HAL_DMA_Start_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_TIM_PWM_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e070      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327c:	60da      	str	r2, [r3, #12]
      break;
 800327e:	e024      	b.n	80032ca <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_TIM_PWM_Start_DMA+0x320>)
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	4a32      	ldr	r2, [pc, #200]	; (8003360 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003296:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3340      	adds	r3, #64	; 0x40
 80032a4:	461a      	mov	r2, r3
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	f7fe fb22 	bl	80018f0 <HAL_DMA_Start_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_TIM_PWM_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e04c      	b.n	8003350 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c4:	60da      	str	r2, [r3, #12]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80032c8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fc8c 	bl	8003bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a21      	ldr	r2, [pc, #132]	; (8003364 <HAL_TIM_PWM_Start_DMA+0x328>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d107      	bne.n	80032f2 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_TIM_PWM_Start_DMA+0x328>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_TIM_PWM_Start_DMA+0x2de>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d009      	beq.n	800331a <HAL_TIM_PWM_Start_DMA+0x2de>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a17      	ldr	r2, [pc, #92]	; (8003368 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_TIM_PWM_Start_DMA+0x2de>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d111      	bne.n	800333e <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d010      	beq.n	800334e <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	e007      	b.n	800334e <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	0800370d 	.word	0x0800370d
 800335c:	080037b5 	.word	0x080037b5
 8003360:	0800367b 	.word	0x0800367b
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800

08003370 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d855      	bhi.n	800342c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033bd 	.word	0x080033bd
 800338c:	0800342d 	.word	0x0800342d
 8003390:	0800342d 	.word	0x0800342d
 8003394:	0800342d 	.word	0x0800342d
 8003398:	080033d9 	.word	0x080033d9
 800339c:	0800342d 	.word	0x0800342d
 80033a0:	0800342d 	.word	0x0800342d
 80033a4:	0800342d 	.word	0x0800342d
 80033a8:	080033f5 	.word	0x080033f5
 80033ac:	0800342d 	.word	0x0800342d
 80033b0:	0800342d 	.word	0x0800342d
 80033b4:	0800342d 	.word	0x0800342d
 80033b8:	08003411 	.word	0x08003411
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe faed 	bl	80019b0 <HAL_DMA_Abort_IT>
      break;
 80033d6:	e02a      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fadf 	bl	80019b0 <HAL_DMA_Abort_IT>
      break;
 80033f2:	e01c      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003402:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fad1 	bl	80019b0 <HAL_DMA_Abort_IT>
      break;
 800340e:	e00e      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800341e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fac3 	bl	80019b0 <HAL_DMA_Abort_IT>
      break;
 800342a:	e000      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800342c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fbda 	bl	8003bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d117      	bne.n	8003476 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	f240 4344 	movw	r3, #1092	; 0x444
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a1a      	ldr	r2, [r3, #32]
 800347c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	f240 4344 	movw	r3, #1092	; 0x444
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d107      	bne.n	80034a6 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Stop_DMA+0x146>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b4:	e013      	b.n	80034de <HAL_TIM_PWM_Stop_DMA+0x16e>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d104      	bne.n	80034c6 <HAL_TIM_PWM_Stop_DMA+0x156>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c4:	e00b      	b.n	80034de <HAL_TIM_PWM_Stop_DMA+0x16e>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_PWM_Stop_DMA+0x166>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d4:	e003      	b.n	80034de <HAL_TIM_PWM_Stop_DMA+0x16e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40012c00 	.word	0x40012c00

080034ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003502:	2302      	movs	r3, #2
 8003504:	e0ac      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	f200 809f 	bhi.w	8003654 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003551 	.word	0x08003551
 8003520:	08003655 	.word	0x08003655
 8003524:	08003655 	.word	0x08003655
 8003528:	08003655 	.word	0x08003655
 800352c:	08003591 	.word	0x08003591
 8003530:	08003655 	.word	0x08003655
 8003534:	08003655 	.word	0x08003655
 8003538:	08003655 	.word	0x08003655
 800353c:	080035d3 	.word	0x080035d3
 8003540:	08003655 	.word	0x08003655
 8003544:	08003655 	.word	0x08003655
 8003548:	08003655 	.word	0x08003655
 800354c:	08003613 	.word	0x08003613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f9c2 	bl	80038e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0208 	orr.w	r2, r2, #8
 800356a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6999      	ldr	r1, [r3, #24]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	619a      	str	r2, [r3, #24]
      break;
 800358e:	e062      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa08 	bl	80039ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	619a      	str	r2, [r3, #24]
      break;
 80035d0:	e041      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fa51 	bl	8003a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0208 	orr.w	r2, r2, #8
 80035ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0204 	bic.w	r2, r2, #4
 80035fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69d9      	ldr	r1, [r3, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	61da      	str	r2, [r3, #28]
      break;
 8003610:	e021      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fa9b 	bl	8003b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69d9      	ldr	r1, [r3, #28]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	021a      	lsls	r2, r3, #8
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	61da      	str	r2, [r3, #28]
      break;
 8003652:	e000      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003654:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	d107      	bne.n	80036a2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	e02a      	b.n	80036f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2202      	movs	r2, #2
 80036b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ba:	e01d      	b.n	80036f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d107      	bne.n	80036d6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d4:	e010      	b.n	80036f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d107      	bne.n	80036f0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2208      	movs	r2, #8
 80036e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ee:	e003      	b.n	80036f8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ffb5 	bl	8003668 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d10b      	bne.n	800373c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d136      	bne.n	80037a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373a:	e031      	b.n	80037a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d10b      	bne.n	800375e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2202      	movs	r2, #2
 800374a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d125      	bne.n	80037a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375c:	e020      	b.n	80037a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	d10b      	bne.n	8003780 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2204      	movs	r2, #4
 800376c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d114      	bne.n	80037a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377e:	e00f      	b.n	80037a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	429a      	cmp	r2, r3
 8003788:	d10a      	bne.n	80037a0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2208      	movs	r2, #8
 800378e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7fd fd7d 	bl	80012a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d103      	bne.n	80037d4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	771a      	strb	r2, [r3, #28]
 80037d2:	e019      	b.n	8003808 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d103      	bne.n	80037e6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2202      	movs	r2, #2
 80037e2:	771a      	strb	r2, [r3, #28]
 80037e4:	e010      	b.n	8003808 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d103      	bne.n	80037f8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2204      	movs	r2, #4
 80037f4:	771a      	strb	r2, [r3, #28]
 80037f6:	e007      	b.n	8003808 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d102      	bne.n	8003808 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2208      	movs	r2, #8
 8003806:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f7fd fd7f 	bl	800130c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <TIM_Base_SetConfig+0xb8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_Base_SetConfig+0x30>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d007      	beq.n	800384c <TIM_Base_SetConfig+0x30>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a26      	ldr	r2, [pc, #152]	; (80038d8 <TIM_Base_SetConfig+0xbc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0x30>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a25      	ldr	r2, [pc, #148]	; (80038dc <TIM_Base_SetConfig+0xc0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <TIM_Base_SetConfig+0xb8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00b      	beq.n	800387e <TIM_Base_SetConfig+0x62>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d007      	beq.n	800387e <TIM_Base_SetConfig+0x62>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <TIM_Base_SetConfig+0xbc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_Base_SetConfig+0x62>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <TIM_Base_SetConfig+0xc0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <TIM_Base_SetConfig+0xb8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d103      	bne.n	80038c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800

080038e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f023 0201 	bic.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f023 0302 	bic.w	r3, r3, #2
 8003928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a1c      	ldr	r2, [pc, #112]	; (80039a8 <TIM_OC1_SetConfig+0xc8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10c      	bne.n	8003956 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0308 	bic.w	r3, r3, #8
 8003942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <TIM_OC1_SetConfig+0xc8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d111      	bne.n	8003982 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800396c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00

080039ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0210 	bic.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f023 0320 	bic.w	r3, r3, #32
 80039f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <TIM_OC2_SetConfig+0xd0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d10d      	bne.n	8003a28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <TIM_OC2_SetConfig+0xd0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d113      	bne.n	8003a58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	40012c00 	.word	0x40012c00

08003a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <TIM_OC3_SetConfig+0xd0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10d      	bne.n	8003afa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <TIM_OC3_SetConfig+0xd0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d113      	bne.n	8003b2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40012c00 	.word	0x40012c00

08003b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <TIM_OC4_SetConfig+0x98>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d109      	bne.n	8003bc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	40012c00 	.word	0x40012c00

08003bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2201      	movs	r2, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1a      	ldr	r2, [r3, #32]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e046      	b.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a12      	ldr	r2, [pc, #72]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800

08003cf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e03d      	b.n	8003d8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e03f      	b.n	8003e28 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fd f831 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2224      	movs	r2, #36	; 0x24
 8003dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9d0 	bl	8004180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dfe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e01e      	b.n	8003e80 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2224      	movs	r2, #36	; 0x24
 8003e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e58:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd f836 	bl	8000ecc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d17c      	bne.n	8003fa2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_UART_Transmit+0x2c>
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e075      	b.n	8003fa4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Transmit+0x3e>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e06e      	b.n	8003fa4 <HAL_UART_Transmit+0x11c>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2221      	movs	r2, #33	; 0x21
 8003ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003edc:	f7fd fae8 	bl	80014b0 <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	d108      	bne.n	8003f0a <HAL_UART_Transmit+0x82>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e003      	b.n	8003f12 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003f1a:	e02a      	b.n	8003f72 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	2180      	movs	r1, #128	; 0x80
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f8df 	bl	80040ea <UART_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e036      	b.n	8003fa4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10b      	bne.n	8003f54 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	3302      	adds	r3, #2
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	e007      	b.n	8003f64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3301      	adds	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1cf      	bne.n	8003f1c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	2140      	movs	r1, #64	; 0x40
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f8af 	bl	80040ea <UART_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e006      	b.n	8003fa4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	f040 8089 	bne.w	80040e0 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Receive+0x2e>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e081      	b.n	80040e2 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Receive+0x40>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e07a      	b.n	80040e2 <HAL_UART_Receive+0x136>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2222      	movs	r2, #34	; 0x22
 8003ffe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004002:	f7fd fa55 	bl	80014b0 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401c:	d108      	bne.n	8004030 <HAL_UART_Receive+0x84>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e003      	b.n	8004038 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004040:	e043      	b.n	80040ca <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2120      	movs	r1, #32
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f84c 	bl	80040ea <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e042      	b.n	80040e2 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	b29a      	uxth	r2, r3
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	3302      	adds	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	e01f      	b.n	80040bc <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004084:	d007      	beq.n	8004096 <HAL_UART_Receive+0xea>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_UART_Receive+0xf8>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e008      	b.n	80040b6 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1b6      	bne.n	8004042 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	4613      	mov	r3, r2
 80040f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fa:	e02c      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d028      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <UART_WaitOnFlagUntilTimeout+0x30>
 800410a:	f7fd f9d1 	bl	80014b0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	429a      	cmp	r2, r3
 8004118:	d21d      	bcs.n	8004156 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004128:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e00f      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	429a      	cmp	r2, r3
 8004172:	d0c3      	beq.n	80040fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041ba:	f023 030c 	bic.w	r3, r3, #12
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	430b      	orrs	r3, r1
 80041c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2c      	ldr	r2, [pc, #176]	; (8004294 <UART_SetConfig+0x114>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d103      	bne.n	80041f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041e8:	f7fe fe52 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	e002      	b.n	80041f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7fe fe3a 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 80041f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	009a      	lsls	r2, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <UART_SetConfig+0x118>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	0119      	lsls	r1, r3, #4
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	fbb2 f2f3 	udiv	r2, r2, r3
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <UART_SetConfig+0x118>)
 800422e:	fba3 0302 	umull	r0, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2064      	movs	r0, #100	; 0x64
 8004236:	fb00 f303 	mul.w	r3, r0, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	3332      	adds	r3, #50	; 0x32
 8004240:	4a15      	ldr	r2, [pc, #84]	; (8004298 <UART_SetConfig+0x118>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800424c:	4419      	add	r1, r3
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009a      	lsls	r2, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	fbb2 f2f3 	udiv	r2, r2, r3
 8004264:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <UART_SetConfig+0x118>)
 8004266:	fba3 0302 	umull	r0, r3, r3, r2
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2064      	movs	r0, #100	; 0x64
 800426e:	fb00 f303 	mul.w	r3, r0, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	3332      	adds	r3, #50	; 0x32
 8004278:	4a07      	ldr	r2, [pc, #28]	; (8004298 <UART_SetConfig+0x118>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	f003 020f 	and.w	r2, r3, #15
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	440a      	add	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40013800 	.word	0x40013800
 8004298:	51eb851f 	.word	0x51eb851f

0800429c <__libc_init_array>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	2500      	movs	r5, #0
 80042a0:	4e0c      	ldr	r6, [pc, #48]	; (80042d4 <__libc_init_array+0x38>)
 80042a2:	4c0d      	ldr	r4, [pc, #52]	; (80042d8 <__libc_init_array+0x3c>)
 80042a4:	1ba4      	subs	r4, r4, r6
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	42a5      	cmp	r5, r4
 80042aa:	d109      	bne.n	80042c0 <__libc_init_array+0x24>
 80042ac:	f000 f822 	bl	80042f4 <_init>
 80042b0:	2500      	movs	r5, #0
 80042b2:	4e0a      	ldr	r6, [pc, #40]	; (80042dc <__libc_init_array+0x40>)
 80042b4:	4c0a      	ldr	r4, [pc, #40]	; (80042e0 <__libc_init_array+0x44>)
 80042b6:	1ba4      	subs	r4, r4, r6
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	42a5      	cmp	r5, r4
 80042bc:	d105      	bne.n	80042ca <__libc_init_array+0x2e>
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042c4:	4798      	blx	r3
 80042c6:	3501      	adds	r5, #1
 80042c8:	e7ee      	b.n	80042a8 <__libc_init_array+0xc>
 80042ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ce:	4798      	blx	r3
 80042d0:	3501      	adds	r5, #1
 80042d2:	e7f2      	b.n	80042ba <__libc_init_array+0x1e>
 80042d4:	08004444 	.word	0x08004444
 80042d8:	08004444 	.word	0x08004444
 80042dc:	08004444 	.word	0x08004444
 80042e0:	08004448 	.word	0x08004448

080042e4 <memset>:
 80042e4:	4603      	mov	r3, r0
 80042e6:	4402      	add	r2, r0
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d100      	bne.n	80042ee <memset+0xa>
 80042ec:	4770      	bx	lr
 80042ee:	f803 1b01 	strb.w	r1, [r3], #1
 80042f2:	e7f9      	b.n	80042e8 <memset+0x4>

080042f4 <_init>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr

08004300 <_fini>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr
